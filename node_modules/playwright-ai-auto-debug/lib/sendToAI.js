// lib/sendToAI.js

import fs from 'fs';
import path from 'path';

/**
 * –°–æ–∑–¥–∞–µ—Ç Allure attachment —Å AI –æ—Ç–≤–µ—Ç–æ–º
 * @param {string} aiResponse - –æ—Ç–≤–µ—Ç AI
 * @param {string} errorContent - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—à–∏–±–∫–∏
 * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
 * @param {number} index - –∏–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞
 * @param {string} errorFilePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
 */
export async function createAllureAttachment(aiResponse, errorContent, config, index, errorFilePath) {
  try {
    const allureDir = config.allure_results_dir || 'allure-results';
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(allureDir)) {
      fs.mkdirSync(allureDir, { recursive: true });
    }
    
    const timestamp = Date.now();
    const attachmentName = `ai-analysis-${timestamp}-${index}.md`;
    const attachmentPath = path.join(allureDir, attachmentName);
    
    const content = createAllureAttachmentContent(aiResponse, errorContent, errorFilePath);
    
    fs.writeFileSync(attachmentPath, content, 'utf-8');
    
    console.log(`üìé Created Allure attachment: ${attachmentName}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º attachment –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Ç–µ—Å—Ç—É –≤ Allure JSON
    await addAttachmentToAllureTest(allureDir, attachmentName, errorFilePath);
    
  } catch (error) {
    console.error(`‚ùå Failed to create Allure attachment: ${error.message}`);
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç AI attachment –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Ç–µ—Å—Ç—É –≤ Allure JSON —Ñ–∞–π–ª–∞—Ö
 * @param {string} allureDir - –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ Allure
 * @param {string} attachmentName - –∏–º—è —Ñ–∞–π–ª–∞ attachment
 * @param {string} errorFilePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
 */
async function addAttachmentToAllureTest(allureDir, attachmentName, errorFilePath) {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
    const files = fs.readdirSync(allureDir).filter(file => 
      file.endsWith('-result.json') && file !== 'environment.properties'
    );
    
    console.log(`üîç Searching for matching test among ${files.length} test result files...`);
    console.log(`üìÅ Target error file: ${errorFilePath}`);
    
    let bestMatch = null;
    let bestMatchScore = 0;
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for (const file of files) {
      const filePath = path.join(allureDir, file);
      const data = fs.readFileSync(filePath, 'utf-8');
      const testResult = JSON.parse(data);
      
      console.log(`\nüìã Checking test: ${testResult.name} (${testResult.uuid})`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç –Ω–∞—à–µ–º—É —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
      if (isMatchingTest(testResult, errorFilePath)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç attachment
        const existingAttachment = testResult.attachments?.find(att => att.source === attachmentName);
        if (existingAttachment) {
          console.log(`‚ö†Ô∏è  AI attachment already exists for test: ${testResult.name}`);
          return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º AI attachment –∫ —Ç–µ—Å—Ç—É
        if (!testResult.attachments) {
          testResult.attachments = [];
        }
        
        testResult.attachments.push({
          name: "ü§ñ AI Analysis",
          source: attachmentName,
          type: "text/markdown"
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON
        fs.writeFileSync(filePath, JSON.stringify(testResult, null, 2), 'utf-8');
        console.log(`‚úÖ Added AI attachment to test: ${testResult.name} (UUID: ${testResult.uuid})`);
        return;
      }
    }
    
    console.log(`‚ö†Ô∏è  No matching test found for error file: ${errorFilePath}`);
    console.log(`üìä Checked ${files.length} test result files, none matched the criteria.`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`\nüîç Available failed tests:`);
    const failedTests = [];
    for (const file of files) {
      const filePath = path.join(allureDir, file);
      const data = fs.readFileSync(filePath, 'utf-8');
      const testResult = JSON.parse(data);
      
      if (testResult.status === 'failed') {
        failedTests.push({
          name: testResult.name,
          uuid: testResult.uuid,
          fullName: testResult.fullName
        });
        console.log(`   - "${testResult.name}" (${testResult.uuid})`);
      }
    }
    
    if (failedTests.length === 0) {
      console.log(`   No failed tests found. AI attachment will be orphaned.`);
    }
    
  } catch (error) {
    console.error(`‚ùå Failed to add attachment to Allure test: ${error.message}`);
    console.error(`Error details:`, error);
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
 * @param {string} errorDir - –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –æ—à–∏–±–∫–æ–π
 * @returns {string|null} –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
 */
function extractTestNameFromErrorPath(errorDir) {
  if (!errorDir) return null;
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞:
  // "demo-üéØ-AI-Debug-Integration-Demo-‚ùå-Infinite-scroll-timeout-chromium" -> "‚ùå Infinite scroll timeout"
  // "element-coverage-test-üéØ-E-598b6-over-top-uncovered-elements-chromium" -> "‚úÖ Cover top uncovered elements"
  
  // –£–¥–∞–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –∫–æ–Ω—Ü–µ
  let cleanDir = errorDir.replace(/-chromium$|-firefox$|-webkit$/, '');
  
  // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ (‚ùå –∏–ª–∏ ‚úÖ)
  const emojiMatch = cleanDir.match(/([‚ùå‚úÖ].*?)$/);
  if (emojiMatch) {
    return emojiMatch[1].replace(/-/g, ' ').trim();
  }
  
  // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è element-coverage-test
  if (cleanDir.includes('element-coverage-test')) {
    // –î–ª—è "element-coverage-test-üéØ-E-598b6-over-top-uncovered-elements"
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–µ—à–∞: "over-top-uncovered-elements" -> "top-uncovered-elements"
    const match = cleanDir.match(/element-coverage-test.*?[0-9a-f]{5,}-(.+)$/);
    if (match) {
      let testName = match[1];
      // –£–±–∏—Ä–∞–µ–º "over-" –µ—Å–ª–∏ –µ—Å—Ç—å
      if (testName.startsWith('over-')) {
        testName = testName.substring(4);
      }
      return '‚úÖ Cover ' + testName.replace(/-/g, ' ').trim();
    }
  }
  
  // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è WebSocket –∏ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
  if (cleanDir.includes('ebSocket')) {
    return '‚ùå WebSocket connection failure';
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —ç–º–æ–¥–∑–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
  const parts = cleanDir.split('-');
  if (parts.length >= 3) {
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
    const testNameParts = parts.slice(-3);
    return testNameParts.join(' ').trim();
  }
  
  return null;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ—Å—Ç —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
 * @param {Object} testResult - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –∏–∑ Allure JSON
 * @param {string} errorFilePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
 * @returns {boolean}
 */
function isMatchingTest(testResult, errorFilePath) {
  if (!testResult || !errorFilePath) {
    console.log(`   ‚ùå Missing testResult or errorFilePath`);
    return false;
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
  const errorDir = path.basename(path.dirname(errorFilePath));
  const errorFileName = path.basename(errorFilePath);
  
  console.log(`üîç Checking test match:`);
  console.log(`   Test name: "${testResult.name}"`);
  console.log(`   Test UUID: "${testResult.uuid}"`);
  console.log(`   Test status: ${testResult.status}`);
  console.log(`   Test fullName: "${testResult.fullName}"`);
  console.log(`   Error dir: "${errorDir}"`);
  console.log(`   Error file: "${errorFileName}"`);
  console.log(`   Error full path: "${errorFilePath}"`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å failed)
  if (testResult.status !== 'failed') {
    console.log(`   ‚ùå Test status is not 'failed'`);
    return false;
  }
  
  // 1. –¢–æ—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ UUID –≤ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
  if (errorDir.includes(testResult.uuid) || errorFilePath.includes(testResult.uuid)) {
    console.log(`   ‚úÖ Exact match found by UUID`);
    return true;
  }
  
  // 2. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ testCaseId –µ—Å–ª–∏ –µ—Å—Ç—å
  if (testResult.testCaseId && (errorDir.includes(testResult.testCaseId) || errorFilePath.includes(testResult.testCaseId))) {
    console.log(`   ‚úÖ Match found by testCaseId`);
    return true;
  }
  
  // 3. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–µ—Å—Ç–∞ –≤ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏–∑ –ø—É—Ç–∏ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "‚ùå Infinite scroll timeout" –∏–∑ "demo-üéØ-AI-Debug-Integration-Demo-‚ùå-Infinite-scroll-timeout-chromium")
  const testNameFromPath = extractTestNameFromErrorPath(errorDir);
  console.log(`   Extracted test name from path: "${testNameFromPath}"`);
  
  if (testNameFromPath && testResult.name) {
    const normalizedPathTestName = normalizeString(testNameFromPath);
    const normalizedResultTestName = normalizeString(testResult.name);
    
    console.log(`   Comparing: "${normalizedPathTestName}" vs "${normalizedResultTestName}"`);
    
    if (normalizedPathTestName === normalizedResultTestName) {
      console.log(`   ‚úÖ Exact match found by test name`);
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ—Å—Ç–æ–≤
    const similarity = calculateStringSimilarity(normalizedPathTestName, normalizedResultTestName);
    console.log(`   Test name similarity: ${Math.round(similarity * 100)}%`);
    
    if (similarity > 0.8) { // –¢—Ä–µ–±—É–µ–º 80% —Å—Ö–æ–¥—Å—Ç–≤–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ—Å—Ç–æ–≤
      console.log(`   ‚úÖ Match found by test name similarity (${Math.round(similarity * 100)}%)`);
      return true;
    }
  }
  
  // 4. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ)  
  function normalizeString(str) {
    return str?.toLowerCase().replace(/[^\w\s]/g, '').replace(/\s+/g, '') || '';
  }
  
  const normalizedTestName = normalizeString(testResult.name);
  const normalizedErrorDir = normalizeString(errorDir);
  
  console.log(`   Normalized test name: "${normalizedTestName}"`);
  console.log(`   Normalized error dir: "${normalizedErrorDir}"`);
  
  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ç–µ—Å—Ç–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ–µ)
  if (normalizedTestName && normalizedErrorDir && normalizedTestName.length > 3) {
    const similarity = calculateStringSimilarity(normalizedTestName, normalizedErrorDir);
    console.log(`   String similarity: ${Math.round(similarity * 100)}%`);
    
    if (similarity > 0.7) { // –¢—Ä–µ–±—É–µ–º 70% —Å—Ö–æ–¥—Å—Ç–≤–∞
      console.log(`   ‚úÖ Match found by test name similarity (${Math.round(similarity * 100)}%)`);
      return true;
    }
  }
  
  // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–∑ –∏–º–µ–Ω–∏ —Ç–µ—Å—Ç–∞ (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏)
  const testWords = normalizedTestName?.split(/\s+/).filter(word => word.length > 3) || [];
  const errorWords = normalizedErrorDir?.split(/\s+/).filter(word => word.length > 3) || [];
  
  let matchingWords = 0;
  let totalSignificantWords = Math.max(testWords.length, errorWords.length);
  
  for (const testWord of testWords) {
    if (errorWords.some(errorWord => 
        errorWord === testWord || // —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        (errorWord.length > 4 && testWord.length > 4 && 
         (errorWord.includes(testWord) || testWord.includes(errorWord)))
    )) {
      matchingWords++;
    }
  }
  
  const matchRatio = totalSignificantWords > 0 ? matchingWords / totalSignificantWords : 0;
  console.log(`   Keyword match ratio: ${matchingWords}/${totalSignificantWords} = ${Math.round(matchRatio * 100)}%`);
  
  if (matchingWords >= 2 && matchRatio > 0.5) { // –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ 50% –æ—Ç –æ–±—â–∏—Ö —Å–ª–æ–≤
    console.log(`   ‚úÖ Match found by keywords (${matchingWords} matching words, ${Math.round(matchRatio * 100)}% ratio)`);
    return true;
  }
  
  console.log(`   ‚ùå No sufficient match found`);
  return false;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–¥—Å—Ç–≤–æ –º–µ–∂–¥—É –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏ (–∞–ª–≥–æ—Ä–∏—Ç–º Jaro-Winkler —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
 * @param {string} str1 
 * @param {string} str2 
 * @returns {number} –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1
 */
function calculateStringSimilarity(str1, str2) {
  if (!str1 || !str2) return 0;
  if (str1 === str2) return 1;
  
  const len1 = str1.length;
  const len2 = str2.length;
  const maxDistance = Math.floor(Math.max(len1, len2) / 2) - 1;
  
  let matches = 0;
  const str1Matches = new Array(len1).fill(false);
  const str2Matches = new Array(len2).fill(false);
  
  // –ù–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  for (let i = 0; i < len1; i++) {
    const start = Math.max(0, i - maxDistance);
    const end = Math.min(i + maxDistance + 1, len2);
    
    for (let j = start; j < end; j++) {
      if (str2Matches[j] || str1[i] !== str2[j]) continue;
      str1Matches[i] = true;
      str2Matches[j] = true;
      matches++;
      break;
    }
  }
  
  if (matches === 0) return 0;
  
  // –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ–∑–∏—Ü–∏–∏
  let transpositions = 0;
  let k = 0;
  for (let i = 0; i < len1; i++) {
    if (!str1Matches[i]) continue;
    while (!str2Matches[k]) k++;
    if (str1[i] !== str2[k]) transpositions++;
    k++;
  }
  
  const jaro = (matches / len1 + matches / len2 + (matches - transpositions / 2) / matches) / 3;
  return jaro;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç AI –æ—Ç–≤–µ—Ç –≤ markdown —Ñ–∞–π–ª
 * @param {string} aiResponse - –æ—Ç–≤–µ—Ç AI
 * @param {string} errorContent - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—à–∏–±–∫–∏
 * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
 * @param {number} index - –∏–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞
 */
export function saveResponseToMarkdown(aiResponse, errorContent, config, index) {
  try {
    const outputDir = config.ai_responses_dir || 'ai-responses';
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    const timestamp = Date.now();
    const filename = config.ai_response_filename_template 
      ? config.ai_response_filename_template
          .replace('{timestamp}', timestamp)
          .replace('{index}', index)
      : `ai-response-${timestamp}-${index}.md`;
    
    const filePath = path.join(outputDir, filename);
    
    const content = createMarkdownContent(aiResponse, errorContent, config);
    
    fs.writeFileSync(filePath, content, 'utf-8');
    
    console.log(`üìÑ Saved AI response: ${filename}`);
    
  } catch (error) {
    console.error(`‚ùå Failed to save markdown response: ${error.message}`);
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Allure attachment
 */
function createAllureAttachmentContent(aiResponse, errorContent, errorFilePath) {
  const timestamp = new Date().toISOString();
  
  return `# ü§ñ AI Test Analysis

## üìä Analysis Details
- **Timestamp:** ${timestamp}
- **Error File:** ${errorFilePath || 'Unknown'}
- **Analysis Type:** Automated AI Debug

## üîç Detected Error
\`\`\`
${errorContent || 'No error content available'}
\`\`\`

## üí° AI Recommended Solution
${aiResponse || 'No AI response available'}

---
*Generated by playwright-ai-auto-debug*
`;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç markdown —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
 */
function createMarkdownContent(aiResponse, errorContent, config) {
  const timestamp = new Date().toISOString();
  
  let content = `# ü§ñ AI Analysis Report

**Generated:** ${timestamp}
**Configuration:** ${config.model || 'Unknown model'}

## üîç Error Analysis
\`\`\`
${errorContent || 'No error content'}
\`\`\`

## üí° AI Solution
${aiResponse || 'No AI response'}

`;

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
  if (config.include_metadata) {
    content += `
## üìã Metadata
- **API Server:** ${config.ai_server || 'Not specified'}
- **Model:** ${config.model || 'Not specified'}
- **Max Tokens:** ${config.max_tokens || 'Not specified'}
- **Temperature:** ${config.temperature || 'Not specified'}
- **Allure Integration:** ${config.allure_integration ? 'Enabled' : 'Disabled'}
- **MCP Integration:** ${config.mcp_integration ? 'Enabled' : 'Disabled'}
`;
  }

  content += '\n---\n*Generated by playwright-ai-auto-debug*\n';
  
  return content;
}

/**
 * Legacy —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
export async function sendToAI(prompt, config, domSnapshot) {
  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ legacy —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
  const { sendToAI: legacySendToAI } = await import('../src/infrastructure/legacy/LegacySendToAI.js');
  return await legacySendToAI(prompt, config, domSnapshot);
}
