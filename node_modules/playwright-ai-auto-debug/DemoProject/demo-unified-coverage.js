import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –µ–¥–∏–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º –≤ –æ–¥–Ω–æ–º –æ—Ç—á–µ—Ç–µ
 */
async function runUnifiedCoverageDemo() {
  console.log('\nüéØ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ï–î–ò–ù–û–ì–û –û–¢–ß–ï–¢–ê –ü–û–ö–†–´–¢–ò–Ø ===\n');
  
  console.log('üìù –ß—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:');
  console.log('   ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ 5 —Ç–µ—Å—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –ø–æ–∫—Ä—ã—Ç–∏—è');
  console.log('   ‚Ä¢ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –µ–¥–∏–Ω—ã–π –æ—Ç—á–µ—Ç');
  console.log('   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º, —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏ —Ç–∏–ø–∞–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
  console.log('   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–æ–∫—Ä—ã—Ç–∏—è');
  console.log('   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π HTML –æ—Ç—á–µ—Ç —Å –≤–∫–ª–∞–¥–∫–∞–º–∏\n');

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
  const unifiedDir = 'unified-coverage';
  if (fs.existsSync(unifiedDir)) {
    fs.rmSync(unifiedDir, { recursive: true, force: true });
  }
  
  console.log('üßπ –û—á–∏—â–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç—á–µ—Ç—ã\n');
  
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –µ–¥–∏–Ω—ã–º —Ç—Ä–µ–∫–∏–Ω–≥–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è...\n');
    
    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –µ–¥–∏–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    const testCommand = 'npx playwright test tests/unified-coverage.spec.js --reporter=list';
    
    console.log(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: ${testCommand}\n`);
    
    const output = execSync(testCommand, { 
      encoding: 'utf8',
      stdio: 'pipe'
    });
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:');
    console.log(output);
    
  } catch (error) {
    console.log('‚ö†Ô∏è –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏ (—ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏):');
    console.log(error.stdout || error.message);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
  console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...');
  
  if (fs.existsSync(unifiedDir)) {
    const files = fs.readdirSync(unifiedDir);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ ${unifiedDir}/:`, files.length);
    
    files.forEach(file => {
      const filePath = path.join(unifiedDir, file);
      const stats = fs.statSync(filePath);
      console.log(`   üìÑ ${file} (${Math.round(stats.size / 1024)}KB)`);
    });
    
    // –ü–æ–∏—Å–∫ HTML –æ—Ç—á–µ—Ç–∞
    const htmlFiles = files.filter(f => f.endsWith('.html'));
    if (htmlFiles.length > 0) {
      const htmlPath = path.join(unifiedDir, htmlFiles[0]);
      const fullPath = path.resolve(htmlPath);
      console.log(`\nüåê HTML –æ—Ç—á–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:`);
      console.log(`   file://${fullPath}`);
    }
    
    // –ü–æ–∏—Å–∫ JSON –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const jsonFiles = files.filter(f => f.endsWith('.json'));
    if (jsonFiles.length > 0) {
      const jsonPath = path.join(unifiedDir, jsonFiles[0]);
      try {
        const reportData = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));
        
        console.log('\nüìä === –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ï–î–ò–ù–û–ì–û –û–¢–ß–ï–¢–ê ===');
        console.log(`üéØ –°–µ—Å—Å–∏—è: ${reportData.globalSession?.sessionName || 'N/A'}`);
        console.log(`üß™ –¢–µ—Å—Ç–æ–≤: ${reportData.globalSession?.totalTests || 0} (‚úÖ${reportData.globalSession?.testsPassed || 0} ‚ùå${reportData.globalSession?.testsFailed || 0})`);
        console.log(`üìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤: ${reportData.summary?.totalElements || 0} (‚úÖ${reportData.summary?.coveredElements || 0} ‚ùå${reportData.summary?.uncoveredElements || 0})`);
        console.log(`üìà –ü–æ–∫—Ä—ã—Ç–∏–µ: ${reportData.summary?.coveragePercentage || 0}%`);
        console.log(`üéØ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: ${reportData.aggregatedStats?.totalInteractions || 0}`);
        
        if (reportData.testsDetails && reportData.testsDetails.length > 0) {
          console.log('\nüèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–µ—Å—Ç–∞–º:');
          reportData.testsDetails
            .sort((a, b) => b.coveragePercentage - a.coveragePercentage)
            .forEach(test => {
              const status = test.status === 'passed' ? '‚úÖ' : test.status === 'failed' ? '‚ùå' : '‚è≥';
              console.log(`   ${status} ${test.name}: ${test.coveragePercentage}% (${test.elementsCovered}/${test.elementsFound})`);
            });
        }
        
        if (reportData.topUncoveredElements?.byType) {
          console.log('\n‚ö†Ô∏è –¢–æ–ø –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:');
          reportData.topUncoveredElements.byType.slice(0, 3).forEach(item => {
            console.log(`   üìã ${item.type}: ${item.count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
          });
        }
        
        if (reportData.unifiedRecommendations && reportData.unifiedRecommendations.length > 0) {
          console.log('\nüí° –ì–ª–∞–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
          reportData.unifiedRecommendations.slice(0, 3).forEach(rec => {
            const priority = rec.priority === 'HIGH' ? 'üî¥' : rec.priority === 'MEDIUM' ? 'üü°' : 'üü¢';
            console.log(`   ${priority} [${rec.priority}] ${rec.category}: ${rec.message}`);
          });
        }
        
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON –æ—Ç—á–µ—Ç:', error.message);
      }
    }
    
  } else {
    console.log('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –æ—Ç—á–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  console.log('\nüéØ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===');
  console.log('\nüìã –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –µ–¥–∏–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:');
  console.log('   ‚úÖ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤');
  console.log('   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É');
  console.log('   ‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —Ç–∏–ø–∞–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º');
  console.log('   ‚úÖ –†–µ–π—Ç–∏–Ω–≥ —Ç–µ—Å—Ç–æ–≤ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
  console.log('   ‚úÖ –¢–æ–ø –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
  console.log('   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é');
  console.log('   ‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
  console.log('\nüí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –µ–¥–∏–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:');
  console.log('   ‚Ä¢ –ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞');
  console.log('   ‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤');
  console.log('   ‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø—Ä–æ–±–ª–µ–º');
  console.log('   ‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
if (import.meta.url === `file://${process.argv[1]}`) {
  runUnifiedCoverageDemo().catch(console.error);
} 