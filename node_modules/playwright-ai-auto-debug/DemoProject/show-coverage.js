#!/usr/bin/env node
// DemoProject/show-coverage.js

import fs from 'fs';
import path from 'path';

/**
 * üìä –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–æ–≤
 */

function showLatestCoverage() {
  const coverageDir = './demo-coverage';
  
  if (!fs.existsSync(coverageDir)) {
    console.log('‚ùå –ü–∞–ø–∫–∞ demo-coverage –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: npm run demo:coverage');
    return;
  }
  
  // –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞
  const files = fs.readdirSync(coverageDir);
  const summaryFiles = files.filter(f => f.startsWith('coverage-summary-') && f.endsWith('.md'));
  
  if (summaryFiles.length === 0) {
    console.log('‚ùå –û—Ç—á–µ—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª)
  summaryFiles.sort();
  const latestSummary = summaryFiles[summaryFiles.length - 1];
  const latestHtml = latestSummary.replace('coverage-summary-', 'unified-coverage-').replace('.md', '.html');
  
  console.log('üìä === –ü–û–ö–†–´–¢–ò–ï –¢–ï–°–¢–û–í ===\n');
  
  // –ß—Ç–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  const summaryPath = path.join(coverageDir, latestSummary);
  const summaryContent = fs.readFileSync(summaryPath, 'utf8');
  console.log(summaryContent);
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ HTML –æ—Ç—á–µ—Ç–µ
  const htmlPath = path.join(coverageDir, latestHtml);
  if (fs.existsSync(htmlPath)) {
    console.log(`\nüåê –î–µ—Ç–∞–ª—å–Ω—ã–π HTML –æ—Ç—á–µ—Ç: ${htmlPath}`);
    console.log(`üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: open ${htmlPath}`);
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
  console.log(`\nüìÅ –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: ${summaryFiles.length}`);
  summaryFiles.forEach((file, index) => {
    const timestamp = file.match(/coverage-summary-(.+)\.md/)[1];
    const date = new Date(timestamp.replace(/Z$/, ''));
    console.log(`   ${index + 1}. ${date.toLocaleString('ru-RU')}`);
  });
}

// –ó–∞–ø—É—Å–∫
showLatestCoverage(); 