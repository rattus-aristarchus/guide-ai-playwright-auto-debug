import fs from 'fs';
import path from 'path';
import { PageElementsAnalyzer } from './pageElementsAnalyzer.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
let globalElementsAnalyzer = null;

class SimpleCoveragePlugin {
  constructor(options = {}) {
    this.enabled = options.enabled !== false;
    this.outputDir = options.outputDir || './coverage-reports';
    this.generateReports = options.generateReports !== false;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    if (!globalElementsAnalyzer) {
      globalElementsAnalyzer = new PageElementsAnalyzer();
    }
    this.elementsAnalyzer = globalElementsAnalyzer;
    
    this.testCoverage = new Map();
    this.allInteractions = [];
    this.currentTest = null;
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
    this.clearOldData();
  }
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  clearOldData() {
    console.log('üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏—è...');
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    this.elementsAnalyzer.coveredElements.clear();
    this.elementsAnalyzer.interactions = [];
    this.elementsAnalyzer.pageElements.clear();
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω–∞
    this.allInteractions = [];
    this.testCoverage.clear();
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    globalElementsAnalyzer = new PageElementsAnalyzer();
    this.elementsAnalyzer = globalElementsAnalyzer;
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
  async setupTest(testInfo, page) {
    if (!this.enabled) return;
    
    this.currentTest = {
      title: testInfo.title,
      file: testInfo.file,
      startTime: Date.now(),
      interactions: []
    };

    console.log(`üìä –ù–∞—á–∞–ª–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞: ${testInfo.title}`);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–≤–∞—Ç –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
    this.interceptPageActions(page);
  }

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è API
  interceptPageActions(page) {
    const originalClick = page.click;
    const originalFill = page.fill;
    const originalSelectOption = page.selectOption;
    const originalCheck = page.check;
    const originalUncheck = page.uncheck;
    const originalGoto = page.goto;
    const originalLocator = page.locator;

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –ø—Ä—è–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page.click = async (selector, options) => {
      await this.trackAction('click', selector, page);
      return originalClick.call(page, selector, options);
    };

    page.fill = async (selector, value, options) => {
      await this.trackAction('fill', selector, page, { value });
      return originalFill.call(page, selector, value, options);
    };

    page.selectOption = async (selector, values, options) => {
      await this.trackAction('select', selector, page, { values });
      return originalSelectOption.call(page, selector, values, options);
    };

    page.check = async (selector, options) => {
      await this.trackAction('check', selector, page);
      return originalCheck.call(page, selector, options);
    };

    page.uncheck = async (selector, options) => {
      await this.trackAction('uncheck', selector, page);
      return originalUncheck.call(page, selector, options);
    };

    page.goto = async (url, options) => {
      await this.trackAction('navigate', url, page);
      const result = await originalGoto.call(page, url, options);
      
      // –°–∫–∞–Ω–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await this.scanPageElements(page);
      
      return result;
    };

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –º–µ—Ç–æ–¥–æ–≤ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤
    page.locator = (selector, options) => {
      const locator = originalLocator.call(page, selector, options);
      
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –ª–æ–∫–∞—Ç–æ—Ä–∞
      const originalLocatorClick = locator.click;
      const originalLocatorFill = locator.fill;
      const originalLocatorCheck = locator.check;
      const originalLocatorUncheck = locator.uncheck;
      const originalLocatorSelectOption = locator.selectOption;

      locator.click = async (options) => {
        await this.trackAction('click', selector, page);
        return originalLocatorClick.call(locator, options);
      };

      locator.fill = async (value, options) => {
        await this.trackAction('fill', selector, page, { value });
        return originalLocatorFill.call(locator, value, options);
      };

      locator.check = async (options) => {
        await this.trackAction('check', selector, page);
        return originalLocatorCheck.call(locator, options);
      };

      locator.uncheck = async (options) => {
        await this.trackAction('uncheck', selector, page);
        return originalLocatorUncheck.call(locator, options);
      };

      locator.selectOption = async (values, options) => {
        await this.trackAction('select', selector, page, { values });
        return originalLocatorSelectOption.call(locator, values, options);
      };

      return locator;
    };
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
  async trackAction(action, selector, page, extra = {}) {
    if (!this.enabled || !this.currentTest) return;

    try {
      const url = page.url();
      const timestamp = Date.now();
      
      let elementInfo = {};
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
      if (action !== 'navigate') {
        try {
          const element = await page.locator(selector).first();
          elementInfo = await element.evaluate((el) => ({
            tagName: el.tagName,
            type: el.type || null,
            role: el.getAttribute('role'),
            ariaLabel: el.getAttribute('aria-label'),
            text: el.textContent?.trim() || '',
            id: el.id,
            className: el.className
          }));
        } catch (error) {
          elementInfo = { error: 'Element not found or not accessible' };
        }
      }

      const interaction = {
        action,
        selector,
        element: elementInfo,
        url,
        timestamp,
        test: this.currentTest.title,
        ...extra
      };

      this.currentTest.interactions.push(interaction);
      this.allInteractions.push(interaction);
      
      // –û—Ç–º–µ—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –ø–æ–∫—Ä—ã—Ç—ã–π
      this.elementsAnalyzer.markElementCovered(selector, action, this.currentTest.title, url);
      
      console.log(`  ‚úì ${action}: ${selector} (${url})`);
      console.log(`  üìä –≠–ª–µ–º–µ–Ω—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ–∫—Ä—ã—Ç—ã–π –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ`);

    } catch (error) {
      console.warn('Auto coverage tracking failed for action:', error.message);
    }
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  async finishTest(testInfo) {
    if (!this.enabled || !this.currentTest) return;

    this.currentTest.endTime = Date.now();
    this.currentTest.duration = this.currentTest.endTime - this.currentTest.startTime;
    this.currentTest.status = testInfo.status;

    console.log(`üìä –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞: ${this.currentTest.title}`);
    console.log(`   –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: ${this.currentTest.interactions.length}`);
    console.log(`   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${this.currentTest.duration}ms`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${this.currentTest.status}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
    this.testCoverage.set(this.currentTest.title, this.currentTest);

    this.currentTest = null;
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  async scanPageElements(page) {
    if (!this.enabled || !this.currentTest) return;

    try {
      await this.elementsAnalyzer.scanPageElements(page, this.currentTest.title);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –≤ –∫–æ–Ω—Ü–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async generateFinalReports() {
    if (!this.enabled || !this.generateReports) return;

    try {
      console.log(`\nüîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤:`);
      console.log(`   –í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: ${this.allInteractions.length}`);
      console.log(`   –ü–æ–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ: ${this.elementsAnalyzer.coveredElements.size}`);
      
      const summaryReport = this.generateSummaryReport();

      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
      await fs.promises.mkdir(this.outputDir, { recursive: true });
      
      // –°–ù–ê–ß–ê–õ–ê –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
      await this.elementsAnalyzer.saveReports(this.outputDir);
      
      // –ü–û–¢–û–ú —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—à–∏ –æ—Ç—á–µ—Ç—ã
      await Promise.all([
        fs.promises.writeFile(
          path.join(this.outputDir, 'simple-coverage-summary.json'),
          JSON.stringify(summaryReport, null, 2)
        ),
        fs.promises.writeFile(
          path.join(this.outputDir, 'simple-coverage-summary.md'),
          this.generateMarkdownReport(summaryReport)
        ),
        (async () => {
          console.log(`üìù –ó–∞–ø–∏—Å—ã–≤–∞—é ${this.allInteractions.length} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –≤ —Ñ–∞–π–ª...`);
          console.log(`üìù –ü–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:`, this.allInteractions[0]);
          await fs.promises.writeFile(
            path.join(this.outputDir, 'simple-coverage-interactions.json'),
            JSON.stringify(this.allInteractions, null, 2)
          );
          console.log(`‚úÖ –§–∞–π–ª simple-coverage-interactions.json –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
        })()
      ]);

      console.log(`\nüìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${this.outputDir}`);
      console.log(`üìÑ –§–∞–π–ª—ã:`);
      console.log(`   ‚Ä¢ simple-coverage-summary.json - —Å–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`);
      console.log(`   ‚Ä¢ simple-coverage-summary.md - —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –æ—Ç—á–µ—Ç`);
      console.log(`   ‚Ä¢ simple-coverage-interactions.json - –≤—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è`);
      console.log(`   ‚Ä¢ elements-coverage-report.json - –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      console.log(`   ‚Ä¢ elements-coverage-report.md - –ø–æ–∫—Ä—ã—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤:', error);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  generateSummaryReport() {
    const tests = Array.from(this.testCoverage.values());
    const totalTests = tests.length;
    const passedTests = tests.filter(t => t.status === 'passed').length;
    const failedTests = tests.filter(t => t.status === 'failed').length;

    const uniqueSelectors = new Set(this.allInteractions.map(i => i.selector));
    const actionTypes = {};
    
    this.allInteractions.forEach(interaction => {
      actionTypes[interaction.action] = (actionTypes[interaction.action] || 0) + 1;
    });

    const elementsByType = {};
    this.allInteractions.forEach(interaction => {
      if (interaction.element && interaction.element.tagName) {
        const tag = interaction.element.tagName.toLowerCase();
        elementsByType[tag] = (elementsByType[tag] || 0) + 1;
      }
    });

    return {
      summary: {
        totalTests,
        passedTests,
        failedTests,
        totalInteractions: this.allInteractions.length,
        uniqueElements: uniqueSelectors.size,
        actionTypes,
        elementsByType
      },
      tests: tests.map(test => ({
        title: test.title,
        status: test.status,
        duration: test.duration,
        interactions: test.interactions.length,
        uniqueSelectors: new Set(test.interactions.map(i => i.selector)).size
      })),
      topElements: Array.from(uniqueSelectors).map(selector => {
        const interactions = this.allInteractions.filter(i => i.selector === selector);
        return {
          selector,
          interactionCount: interactions.length,
          actions: [...new Set(interactions.map(i => i.action))],
          tests: [...new Set(interactions.map(i => i.test))]
        };
      }).sort((a, b) => b.interactionCount - a.interactionCount).slice(0, 10)
    };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown –æ—Ç—á–µ—Ç–∞
  generateMarkdownReport(summaryReport) {
    return `# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è UI

## üìä –°–≤–æ–¥–∫–∞

- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤**: ${summaryReport.summary.totalTests}
- **–ü—Ä–æ—à–µ–¥—à–∏—Ö**: ${summaryReport.summary.passedTests}
- **–£–ø–∞–≤—à–∏—Ö**: ${summaryReport.summary.failedTests}
- **–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π**: ${summaryReport.summary.totalInteractions}
- **–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤**: ${summaryReport.summary.uniqueElements}

## üéØ –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π

${Object.entries(summaryReport.summary.actionTypes)
  .map(([action, count]) => `- **${action}**: ${count}`)
  .join('\n')}

## üè∑Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º

${Object.entries(summaryReport.summary.elementsByType)
  .map(([tag, count]) => `- **${tag}**: ${count}`)
  .join('\n')}

## üîù –¢–æ–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º

${summaryReport.topElements.map((element, index) => `
### ${index + 1}. \`${element.selector}\`
- **–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π**: ${element.interactionCount}
- **–î–µ–π—Å—Ç–≤–∏—è**: ${element.actions.join(', ')}
- **–¢–µ—Å—Ç—ã**: ${element.tests.join(', ')}
`).join('\n')}

## üìù –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤

${summaryReport.tests.map(test => `
### ${test.title}
- **–°—Ç–∞—Ç—É—Å**: ${test.status === 'passed' ? '‚úÖ –ü—Ä–æ—à–µ–ª' : '‚ùå –£–ø–∞–ª'}
- **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: ${test.duration}ms
- **–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π**: ${test.interactions}
- **–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤**: ${test.uniqueSelectors}
`).join('\n')}

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ${new Date().toLocaleString('ru-RU')}*
`;
  }
}

export { SimpleCoveragePlugin }; 