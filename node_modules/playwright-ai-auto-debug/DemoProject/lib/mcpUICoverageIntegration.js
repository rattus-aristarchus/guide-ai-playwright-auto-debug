import { UICoverageAnalyzer } from './uiCoverageAnalyzer.js';

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è MCP —Å UI Coverage Analyzer
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö DOM snapshots –æ—Ç MCP –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
 */
export class MCPUICoverageIntegration {
  constructor(mcpClient, config = {}) {
    this.mcpClient = mcpClient;
    this.analyzer = new UICoverageAnalyzer(config);
    this.config = {
      autoSaveReports: config.autoSaveReports !== false,
      reportsDir: config.reportsDir || 'ui-coverage-reports',
      enableGoldenComparison: config.enableGoldenComparison || false,
      criticalElements: config.criticalElements || [],
      ...config
    };
  }

  /**
   * üå≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ accessibility tree —á–µ—Ä–µ–∑ MCP
   * @param {string} pageName - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞
   * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
   */
  async analyzePageCoverage(pageName = 'unknown-page') {
    try {
      console.log(`üîç –ê–Ω–∞–ª–∏–∑ UI –ø–æ–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageName}`);
      
      // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ snapshot –æ—Ç MCP
      const mcpSnapshot = await this.getMCPSnapshot();
      
      // 2. –ü–∞—Ä—Å–∏–Ω–≥ accessibility tree
      const accessibilityTree = this.analyzer.parseAccessibilityTree(mcpSnapshot);
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${accessibilityTree.totalCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      
      // 3. –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const elementStats = this.analyzer.analyzeElementCoverage(accessibilityTree);
      console.log(`üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${elementStats.summary.interactive}`);
      
      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const criticalCheck = await this.checkCriticalElements(accessibilityTree);
      
      // 5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
      let goldenComparison = null;
      if (this.config.enableGoldenComparison) {
        goldenComparison = await this.compareWithGolden(accessibilityTree, pageName);
      }
      
      // 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      const analysisResults = {
        accessibilityTree,
        elementStats,
        criticalCheck,
        goldenComparison
      };
      
      const coverageReport = this.analyzer.generateCoverageReport(analysisResults, pageName);
      
      // 7. –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
      if (this.config.autoSaveReports) {
        await this.saveReport(coverageReport, pageName);
      }
      
      return {
        success: true,
        report: coverageReport,
        analysisResults,
        recommendations: this.generateActionableRecommendations(analysisResults)
      };
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ UI –ø–æ–∫—Ä—ã—Ç–∏—è: ${error.message}`);
      return {
        success: false,
        error: error.message,
        recommendations: ['–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É']
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ snapshot –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞
   */
  async getMCPSnapshot() {
    if (!this.mcpClient || !this.mcpClient.connected) {
      throw new Error('MCP –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }
    
    try {
      const snapshot = await this.mcpClient.getSnapshot();
      if (!snapshot || !snapshot.content) {
        throw new Error('–ü—É—Å—Ç–æ–π snapshot –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      return snapshot.content;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è MCP snapshot: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async checkCriticalElements(accessibilityTree) {
    const criticalElements = this.config.criticalElements;
    
    if (criticalElements.length === 0) {
      console.log('‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      return { allCriticalPresent: true, foundCritical: [], missingCritical: [] };
    }
    
    const criticalCheck = this.analyzer.checkCriticalElements(accessibilityTree, criticalElements);
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${criticalCheck.foundCritical.length}/${criticalElements.length}`);
    
    if (criticalCheck.missingCritical.length > 0) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:');
      criticalCheck.missingCritical.forEach(missing => {
        console.log(`   ‚Ä¢ ${missing.name} (${missing.type})`);
      });
    }
    
    return criticalCheck;
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∑–æ–ª–æ—Ç–æ–π –≤–µ—Ä—Å–∏–µ–π
   */
  async compareWithGolden(currentTree, pageName) {
    try {
      const goldenPath = `golden-snapshots/${pageName}.json`;
      const goldenTree = await this.loadGoldenSnapshot(goldenPath);
      
      if (!goldenTree) {
        console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ snapshot: ${goldenPath}`);
        await this.saveGoldenSnapshot(currentTree, goldenPath);
        return { identical: true, isNewGolden: true };
      }
      
      const comparison = this.analyzer.compareWithGolden(currentTree, goldenTree);
      
      if (!comparison.identical) {
        console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è —Å —ç—Ç–∞–ª–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π:');
        comparison.differences.forEach(diff => console.log(`   ${diff}`));
      }
      
      return comparison;
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —ç—Ç–∞–ª–æ–Ω–æ–º: ${error.message}`);
      return null;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ snapshot
   */
  async loadGoldenSnapshot(path) {
    try {
      const fs = await import('fs');
      if (!fs.existsSync(path)) {
        return null;
      }
      
      const content = fs.readFileSync(path, 'utf8');
      return JSON.parse(content);
    } catch (error) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–π snapshot: ${error.message}`);
      return null;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ snapshot
   */
  async saveGoldenSnapshot(tree, path) {
    try {
      const fs = await import('fs');
      const pathModule = await import('path');
      
      const dir = pathModule.dirname(path);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      
      fs.writeFileSync(path, JSON.stringify(tree, null, 2));
      console.log(`üíæ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π snapshot —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${path}`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ snapshot: ${error.message}`);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
   */
  async saveReport(report, pageName) {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `ui-coverage-${pageName}-${timestamp}.md`;
    
    return await this.analyzer.saveReport(report, filename);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  generateActionableRecommendations(analysisResults) {
    const recommendations = [];
    const { elementStats, criticalCheck, goldenComparison } = analysisResults;
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    if (criticalCheck?.missingCritical?.length > 0) {
      recommendations.push({
        priority: 'HIGH',
        category: 'Critical Elements',
        message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ${criticalCheck.missingCritical.length} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`,
        action: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
        elements: criticalCheck.missingCritical.map(el => el.name)
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    const accessibilityScore = this.analyzer.calculateAccessibilityScore(analysisResults);
    if (accessibilityScore < 70) {
      recommendations.push({
        priority: 'MEDIUM',
        category: 'Accessibility',
        message: `–ù–∏–∑–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: ${accessibilityScore}%`,
        action: '–î–æ–±–∞–≤—å—Ç–µ aria-label –∏ role –∞—Ç—Ä–∏–±—É—Ç—ã –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º',
        target: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ accessibility –∞—Ç—Ä–∏–±—É—Ç–æ–≤'
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º
    if (goldenComparison && !goldenComparison.identical) {
      if (goldenComparison.removedElements?.length > 0) {
        recommendations.push({
          priority: 'HIGH',
          category: 'Regression',
          message: `–£–¥–∞–ª–µ–Ω–æ ${goldenComparison.removedElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`,
          action: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –±—ã–ª–∞ –ª–∏ –ø–æ—Ç–µ—Ä—è–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
          elements: goldenComparison.removedElements.map(el => el.text || el.type)
        });
      }
      
      if (goldenComparison.newElements?.length > 0) {
        recommendations.push({
          priority: 'LOW',
          category: 'New Features',
          message: `–î–æ–±–∞–≤–ª–µ–Ω–æ ${goldenComparison.newElements.length} –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`,
          action: '–û–±–Ω–æ–≤–∏—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
          elements: goldenComparison.newElements.map(el => el.text || el.type)
        });
      }
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é
    const interactiveCount = elementStats?.summary?.interactive || 0;
    if (interactiveCount < 3) {
      recommendations.push({
        priority: 'MEDIUM',
        category: 'Test Coverage',
        message: `–ú–∞–ª–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${interactiveCount}`,
        action: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å–µ –ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
        target: '–ö–Ω–æ–ø–∫–∏, —Å—Å—ã–ª–∫–∏, –ø–æ–ª—è –≤–≤–æ–¥–∞'
      });
    }
    
    return recommendations;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CI/CD –æ—Ç—á–µ—Ç–∞
   */
  async generateCIReport(pageName, exitOnFailure = false) {
    const result = await this.analyzePageCoverage(pageName);
    
    if (!result.success) {
      console.error('‚ùå UI Coverage –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è');
      if (exitOnFailure) {
        process.exit(1);
      }
      return result;
    }
    
    const { report, recommendations } = result;
    
    // –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è CI
    console.log('\nüìä UI Coverage CI/CD Report:');
    console.log(`   Page: ${pageName}`);
    console.log(`   Total Elements: ${report.summary.totalElements}`);
    console.log(`   Interactive Elements: ${report.summary.interactiveElements}`);
    console.log(`   Accessibility Score: ${report.summary.accessibilityScore}%`);
    console.log(`   Coverage: ${report.summary.coveragePercentage}%`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
    const criticalIssues = recommendations.filter(rec => rec.priority === 'HIGH');
    
    if (criticalIssues.length > 0) {
      console.log(`\nüî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (${criticalIssues.length}):`);
      criticalIssues.forEach(issue => {
        console.log(`   ‚Ä¢ ${issue.message}`);
        console.log(`     –î–µ–π—Å—Ç–≤–∏–µ: ${issue.action}`);
      });
      
      if (exitOnFailure) {
        console.log('\n‚ùå –°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º UI');
        process.exit(1);
      }
    } else {
      console.log('\n‚úÖ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    }
    
    return result;
  }

  /**
   * –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
   */
  async analyzeBatch(pages, options = {}) {
    const results = [];
    
    console.log(`üîÑ –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ${pages.length} —Å—Ç—Ä–∞–Ω–∏—Ü...`);
    
    for (const pageName of pages) {
      console.log(`\nüìÑ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageName}`);
      
      try {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —á–µ—Ä–µ–∑ MCP
        // await this.mcpClient.navigateToPage(pageName);
        
        const result = await this.analyzePageCoverage(pageName);
        results.push({ pageName, ...result });
        
        if (options.delay) {
          await new Promise(resolve => setTimeout(resolve, options.delay));
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${pageName}: ${error.message}`);
        results.push({ 
          pageName, 
          success: false, 
          error: error.message 
        });
      }
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    await this.generateBatchReport(results);
    
    return results;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–∞–∫–µ—Ç–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É
   */
  async generateBatchReport(results) {
    const successful = results.filter(r => r.success);
    const failed = results.filter(r => !r.success);
    
    console.log('\nüìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:');
    console.log(`   –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${successful.length}`);
    console.log(`   –û—à–∏–±–æ–∫: ${failed.length}`);
    
    if (successful.length > 0) {
      const avgCoverage = successful.reduce((sum, r) => 
        sum + (r.report?.summary?.coveragePercentage || 0), 0) / successful.length;
      const avgAccessibility = successful.reduce((sum, r) => 
        sum + (r.report?.summary?.accessibilityScore || 0), 0) / successful.length;
      
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: ${avgCoverage.toFixed(1)}%`);
      console.log(`   –°—Ä–µ–¥–Ω—è—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${avgAccessibility.toFixed(1)}%`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const batchReport = {
      timestamp,
      summary: {
        total: results.length,
        successful: successful.length,
        failed: failed.length
      },
      results
    };
    
    const fs = await import('fs');
    const reportsDir = this.config.reportsDir;
    
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir, { recursive: true });
    }
    
    fs.writeFileSync(
      `${reportsDir}/batch-report-${timestamp}.json`,
      JSON.stringify(batchReport, null, 2)
    );
    
    console.log(`üíæ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: batch-report-${timestamp}.json`);
  }
} 