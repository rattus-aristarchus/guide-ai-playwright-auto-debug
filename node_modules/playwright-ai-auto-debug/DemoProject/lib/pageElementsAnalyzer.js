import fs from 'fs';
import path from 'path';

class PageElementsAnalyzer {
  constructor() {
    this.pageElements = new Map(); // URL -> —ç–ª–µ–º–µ–Ω—Ç—ã
    this.coveredElements = new Set(); // –ø–æ–∫—Ä—ã—Ç—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    this.interactions = []; // –≤—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
  }

  // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  async scanPageElements(page, testName) {
    try {
      const url = page.url();
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      const elements = await page.evaluate(() => {
        const interactiveSelectors = [
          'button',
          'input',
          'select', 
          'textarea',
          'a[href]',
          '[onclick]',
          '[role="button"]',
          '[role="link"]',
          '[role="tab"]',
          '[role="menuitem"]',
          '[tabindex]',
          'form',
          'label',
          '[data-testid]',
          '[data-test]',
          '[id]',
          '.btn',
          '.button',
          '.link',
          '.clickable'
        ];

        const foundElements = [];
        
        interactiveSelectors.forEach(selector => {
          try {
            const elements = document.querySelectorAll(selector);
            elements.forEach((el, index) => {
              // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
              let uniqueSelector = selector;
              if (elements.length > 1) {
                if (el.id) {
                  uniqueSelector = `#${el.id}`;
                } else if (el.className) {
                  uniqueSelector = `${el.tagName.toLowerCase()}.${el.className.split(' ')[0]}`;
                } else {
                  uniqueSelector = `${selector}:nth-child(${index + 1})`;
                }
              }

              const rect = el.getBoundingClientRect();
              const isVisible = rect.width > 0 && rect.height > 0 && 
                               window.getComputedStyle(el).visibility !== 'hidden' &&
                               window.getComputedStyle(el).display !== 'none';

              foundElements.push({
                selector: uniqueSelector,
                tagName: el.tagName.toLowerCase(),
                type: el.type || null,
                text: el.textContent?.trim().substring(0, 50) || '',
                placeholder: el.placeholder || '',
                value: el.value || '',
                href: el.href || '',
                id: el.id || '',
                className: el.className || '',
                role: el.getAttribute('role') || '',
                ariaLabel: el.getAttribute('aria-label') || '',
                dataTestId: el.getAttribute('data-testid') || el.getAttribute('data-test') || '',
                isVisible,
                position: {
                  x: Math.round(rect.x),
                  y: Math.round(rect.y),
                  width: Math.round(rect.width),
                  height: Math.round(rect.height)
                },
                isClickable: el.tagName.toLowerCase() === 'button' || 
                           el.tagName.toLowerCase() === 'a' ||
                           el.onclick !== null ||
                           el.getAttribute('role') === 'button' ||
                           el.style.cursor === 'pointer',
                isFormElement: ['input', 'select', 'textarea'].includes(el.tagName.toLowerCase())
              });
            });
          } catch (e) {
            console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ ${selector}:`, e.message);
          }
        });

        return foundElements;
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      this.pageElements.set(url, {
        url,
        testName,
        timestamp: Date.now(),
        elements: elements,
        totalElements: elements.length,
        visibleElements: elements.filter(el => el.isVisible).length,
        clickableElements: elements.filter(el => el.isClickable).length,
        formElements: elements.filter(el => el.isFormElement).length
      });

      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${elements.length} –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ ${url}`);
      console.log(`   –í–∏–¥–∏–º—ã—Ö: ${elements.filter(el => el.isVisible).length}`);
      console.log(`   –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö: ${elements.filter(el => el.isClickable).length}`);
      console.log(`   –§–æ—Ä–º: ${elements.filter(el => el.isFormElement).length}`);

      return elements;
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', error.message);
      return [];
    }
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –ø–æ–∫—Ä—ã—Ç—ã–π
  markElementCovered(selector, action, testName, url) {
    this.coveredElements.add(selector);
    this.interactions.push({
      selector,
      action,
      testName,
      url,
      timestamp: Date.now()
    });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
  generateCoverageReport() {
    const allPages = Array.from(this.pageElements.values());
    const allElements = allPages.flatMap(page => 
      page.elements.map(el => ({...el, pageUrl: page.url, testName: page.testName}))
    );

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
    const coveredElements = allElements.filter(el => this.coveredElements.has(el.selector));
    const uncoveredElements = allElements.filter(el => !this.coveredElements.has(el.selector));

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    const elementsByType = {};
    const coverageByType = {};

    allElements.forEach(el => {
      const type = el.tagName;
      elementsByType[type] = (elementsByType[type] || 0) + 1;
      
      if (this.coveredElements.has(el.selector)) {
        coverageByType[type] = (coverageByType[type] || 0) + 1;
      }
    });

    return {
      summary: {
        totalElements: allElements.length,
        coveredElements: coveredElements.length,
        uncoveredElements: uncoveredElements.length,
        coveragePercent: Math.round((coveredElements.length / allElements.length) * 100) || 0,
        totalInteractions: this.interactions.length,
        pagesAnalyzed: allPages.length
      },
      elementsByType,
      coverageByType,
      detailedCoverage: {
        covered: coveredElements,
        uncovered: uncoveredElements
      },
      interactions: this.interactions
    };
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
  async saveReports(outputDir = './coverage-reports') {
    const reportData = this.generateCoverageReport();
    
    await fs.promises.mkdir(outputDir, { recursive: true });
    
    // JSON –æ—Ç—á–µ—Ç
    await fs.promises.writeFile(
      path.join(outputDir, 'elements-coverage-report.json'),
      JSON.stringify(reportData, null, 2)
    );

    // Markdown –æ—Ç—á–µ—Ç
    const mdReport = this.generateMarkdownReport(reportData);
    await fs.promises.writeFile(
      path.join(outputDir, 'elements-coverage-report.md'),
      mdReport
    );

    console.log(`\nüìä –û—Ç—á–µ—Ç—ã –ø–æ–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:`);
    console.log(`   üìä elements-coverage-report.json - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
    console.log(`   üìù elements-coverage-report.md - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç`);

    return reportData;
  }

  // Markdown –æ—Ç—á–µ—Ç
  generateMarkdownReport(reportData) {
    return `# –û—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤

## üìä –°–≤–æ–¥–∫–∞

- **–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤**: ${reportData.summary.totalElements}
- **–ü–æ–∫—Ä—ã—Ç–æ —Ç–µ—Å—Ç–∞–º–∏**: ${reportData.summary.coveredElements}
- **–ù–µ –ø–æ–∫—Ä—ã—Ç–æ**: ${reportData.summary.uncoveredElements}
- **–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è**: ${reportData.summary.coveragePercent}%
- **–°—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ**: ${reportData.summary.pagesAnalyzed}

## üéØ –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —Ç–∏–ø–∞–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤

${Object.entries(reportData.elementsByType).map(([type, total]) => {
  const covered = reportData.coverageByType[type] || 0;
  const percent = Math.round((covered / total) * 100) || 0;
  return `- **${type.toUpperCase()}**: ${covered}/${total} (${percent}%)`;
}).join('\n')}

## ‚úÖ –ü–æ–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (${reportData.summary.coveredElements})

${reportData.detailedCoverage.covered.map(el => 
  `- \`${el.selector}\` - ${el.tagName.toUpperCase()} "${el.text}" (${el.pageUrl})`
).join('\n')}

${reportData.detailedCoverage.covered.length === 0 ? '\n*–ù–µ—Ç –ø–æ–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤*' : ''}

## ‚ùå –ù–µ –ø–æ–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (${reportData.summary.uncoveredElements})

${reportData.detailedCoverage.uncovered.map(el => 
  `- \`${el.selector}\` - ${el.tagName.toUpperCase()} "${el.text}" (${el.pageUrl}) ${el.isVisible ? 'üëÅÔ∏è' : 'üôà'}`
).join('\n')}

## üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π

${reportData.interactions.map(interaction => 
  `- **${interaction.action}** –Ω–∞ \`${interaction.selector}\` –≤ —Ç–µ—Å—Ç–µ "${interaction.testName}"`
).join('\n')}

${reportData.interactions.length === 0 ? '\n*–ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π*' : ''}

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ${new Date().toLocaleString('ru-RU')}*
`;
  }
}

export { PageElementsAnalyzer }; 