import fs from 'fs';
import path from 'path';

/**
 * –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–∫—Ä—ã—Ç–∏—è UI-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ MCP
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç accessibility tree –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏
 */
export class UICoverageAnalyzer {
  constructor(config = {}) {
    this.config = {
      goldenSnapshotsDir: config.goldenSnapshotsDir || 'golden-snapshots',
      coverageReportsDir: config.coverageReportsDir || 'ui-coverage-reports',
      criticalElements: config.criticalElements || [],
      ...config
    };
    
    this.elementStats = {
      buttons: [],
      inputs: [],
      links: [],
      forms: [],
      navigation: [],
      interactive: []
    };
    
    this.coverageReport = {
      totalElements: 0,
      coveredElements: 0,
      missingElements: [],
      unexpectedElements: [],
      criticalElementsStatus: {}
    };
  }

  /**
   * üå≥ 1. –ê–Ω–∞–ª–∏–∑ –¥–µ—Ä–µ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑ MCP snapshot
   * @param {string} snapshotContent - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ snapshot –æ—Ç MCP
   * @returns {Object} —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  parseAccessibilityTree(snapshotContent) {
    const lines = snapshotContent.split('\n');
    const elements = [];
    
    for (const line of lines) {
      const trimmed = line.trim();
      
      // –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      if (trimmed.includes('button')) {
        elements.push(this.parseElement(trimmed, 'button'));
      } else if (trimmed.includes('link')) {
        elements.push(this.parseElement(trimmed, 'link'));
      } else if (trimmed.includes('textbox') || trimmed.includes('input')) {
        elements.push(this.parseElement(trimmed, 'input'));
      } else if (trimmed.includes('navigation')) {
        elements.push(this.parseElement(trimmed, 'navigation'));
      } else if (trimmed.includes('form')) {
        elements.push(this.parseElement(trimmed, 'form'));
      }
    }
    
    return {
      elements,
      totalCount: elements.length,
      byType: this.groupElementsByType(elements)
    };
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ snapshot
   */
  parseElement(line, type) {
    const element = {
      type,
      text: this.extractText(line),
      url: this.extractUrl(line),
      attributes: this.extractAttributes(line),
      selector: this.generateSelector(line, type),
      line: line.trim()
    };
    
    return element;
  }

  /**
   * ‚úÖ 2. –ü–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ö —Å–≤–æ–π—Å—Ç–≤
   * @param {Object} accessibilityTree - –¥–µ—Ä–µ–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
   * @returns {Object} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  analyzeElementCoverage(accessibilityTree) {
    const stats = {
      buttons: accessibilityTree.byType.button || [],
      inputs: accessibilityTree.byType.input || [],
      links: accessibilityTree.byType.link || [],
      forms: accessibilityTree.byType.form || [],
      navigation: accessibilityTree.byType.navigation || [],
      interactive: []
    };

    // –ü–æ–¥—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    stats.interactive = [
      ...stats.buttons,
      ...stats.inputs,
      ...stats.links.filter(link => link.url && link.url !== '#')
    ];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    stats.elementsWithAriaLabel = accessibilityTree.elements.filter(
      el => el.attributes.includes('aria-label')
    );
    
    stats.elementsWithRole = accessibilityTree.elements.filter(
      el => el.attributes.includes('role=')
    );

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    stats.summary = {
      totalElements: accessibilityTree.totalCount,
      buttons: stats.buttons.length,
      inputs: stats.inputs.length,
      links: stats.links.length,
      forms: stats.forms.length,
      navigation: stats.navigation.length,
      interactive: stats.interactive.length,
      withAriaLabel: stats.elementsWithAriaLabel.length,
      withRole: stats.elementsWithRole.length
    };

    return stats;
  }

  /**
   * üîÑ 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
   * @param {Object} currentSnapshot - —Ç–µ–∫—É—â–∏–π snapshot
   * @param {Array} criticalElements - –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns {Object} –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
   */
  checkCriticalElements(currentSnapshot, criticalElements = []) {
    const report = {
      allCriticalPresent: true,
      missingCritical: [],
      foundCritical: [],
      recommendations: []
    };

    const allElements = currentSnapshot.elements || [];
    
    for (const critical of criticalElements) {
      const found = allElements.find(el => 
        this.matchesCriticalElement(el, critical)
      );
      
      if (found) {
        report.foundCritical.push({
          ...critical,
          element: found,
          status: 'found'
        });
      } else {
        report.missingCritical.push({
          ...critical,
          status: 'missing'
        });
        report.allCriticalPresent = false;
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        report.recommendations.push(
          `‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç "${critical.name}" (${critical.type}) –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ`
        );
      }
    }

    return report;
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å "–∑–æ–ª–æ—Ç–æ–π" –≤–µ—Ä—Å–∏–µ–π snapshot
   * @param {Object} currentSnapshot - —Ç–µ–∫—É—â–∏–π snapshot
   * @param {Object} goldenSnapshot - —ç—Ç–∞–ª–æ–Ω–Ω—ã–π snapshot
   * @returns {Object} –æ—Ç—á–µ—Ç –æ —Ä–∞–∑–ª–∏—á–∏—è—Ö
   */
  compareWithGolden(currentSnapshot, goldenSnapshot) {
    const report = {
      identical: true,
      differences: [],
      newElements: [],
      removedElements: [],
      modifiedElements: []
    };

    const currentElements = currentSnapshot.elements || [];
    const goldenElements = goldenSnapshot.elements || [];

    // –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    for (const current of currentElements) {
      const found = goldenElements.find(golden => 
        this.elementsMatch(current, golden)
      );
      
      if (!found) {
        report.newElements.push(current);
        report.identical = false;
      }
    }

    // –ü–æ–∏—Å–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    for (const golden of goldenElements) {
      const found = currentElements.find(current => 
        this.elementsMatch(current, golden)
      );
      
      if (!found) {
        report.removedElements.push(golden);
        report.identical = false;
      }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–∏–π
    if (report.newElements.length > 0) {
      report.differences.push(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ ${report.newElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    }
    
    if (report.removedElements.length > 0) {
      report.differences.push(`‚ûñ –£–¥–∞–ª–µ–Ω–æ ${report.removedElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    }

    return report;
  }

  /**
   * ‚öôÔ∏è 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è CI/CD
   * @param {Object} analysisResults - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
   * @param {string} pageName - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   * @returns {Object} —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  generateCoverageReport(analysisResults, pageName = 'unknown') {
    const timestamp = new Date().toISOString();
    
    const report = {
      metadata: {
        pageName,
        timestamp,
        analyzer: 'UICoverageAnalyzer',
        version: '1.0.0'
      },
      
      summary: {
        totalElements: analysisResults.elementStats?.summary?.totalElements || 0,
        interactiveElements: analysisResults.elementStats?.summary?.interactive || 0,
        accessibilityScore: this.calculateAccessibilityScore(analysisResults),
        coveragePercentage: this.calculateCoveragePercentage(analysisResults)
      },
      
      elementBreakdown: analysisResults.elementStats?.summary || {},
      
      criticalElementsCheck: analysisResults.criticalCheck || {},
      
      goldenComparison: analysisResults.goldenComparison || {},
      
      recommendations: this.generateRecommendations(analysisResults),
      
      rawData: {
        elements: analysisResults.accessibilityTree?.elements || [],
        elementStats: analysisResults.elementStats || {}
      }
    };

    return report;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
   */
  async saveReport(report, filename) {
    const reportsDir = this.config.coverageReportsDir;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir, { recursive: true });
    }
    
    const filePath = path.join(reportsDir, filename);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –æ—Ç—á–µ—Ç–∞
    fs.writeFileSync(
      filePath.replace('.md', '.json'), 
      JSON.stringify(report, null, 2)
    );
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Markdown –æ—Ç—á–µ—Ç–∞
    const markdownReport = this.generateMarkdownReport(report);
    fs.writeFileSync(filePath, markdownReport);
    
    console.log(`üìä UI Coverage –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);
    
    return filePath;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown –æ—Ç—á–µ—Ç–∞
   */
  generateMarkdownReport(report) {
    return `# üéØ UI Coverage Report: ${report.metadata.pageName}

## üìä –°–≤–æ–¥–∫–∞

- **–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:** ${report.summary.totalElements}
- **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:** ${report.summary.interactiveElements}
- **–û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:** ${report.summary.accessibilityScore}%
- **–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏:** ${report.summary.coveragePercentage}%
- **–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** ${report.metadata.timestamp}

## üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤

| –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ |
|--------------|------------|
| –ö–Ω–æ–ø–∫–∏ | ${report.elementBreakdown.buttons || 0} |
| –ü–æ–ª—è –≤–≤–æ–¥–∞ | ${report.elementBreakdown.inputs || 0} |
| –°—Å—ã–ª–∫–∏ | ${report.elementBreakdown.links || 0} |
| –§–æ—Ä–º—ã | ${report.elementBreakdown.forms || 0} |
| –ù–∞–≤–∏–≥–∞—Ü–∏—è | ${report.elementBreakdown.navigation || 0} |

## ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤

${this.formatCriticalElementsCheck(report.criticalElementsCheck)}

## üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

${report.recommendations.map(rec => `- ${rec}`).join('\n')}

## üîó –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º

${this.formatGoldenComparison(report.goldenComparison)}

---
*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é UICoverageAnalyzer*`;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  extractText(line) {
    const textMatch = line.match(/text[:\s]+"([^"]+)"/);
    return textMatch ? textMatch[1] : '';
  }

  extractUrl(line) {
    const urlMatch = line.match(/\/url[:\s]+"?([^"\s]+)"?/);
    return urlMatch ? urlMatch[1] : '';
  }

  extractAttributes(line) {
    return line; // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
  }

  generateSelector(line, type) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
    const text = this.extractText(line);
    if (text) {
      return `${type}:has-text("${text}")`;
    }
    return `${type}`;
  }

  groupElementsByType(elements) {
    return elements.reduce((groups, element) => {
      const type = element.type;
      if (!groups[type]) {
        groups[type] = [];
      }
      groups[type].push(element);
      return groups;
    }, {});
  }

  matchesCriticalElement(element, critical) {
    return element.type === critical.type && 
           (element.text.includes(critical.name) || 
            element.selector.includes(critical.selector));
  }

  elementsMatch(el1, el2) {
    return el1.type === el2.type && 
           el1.text === el2.text && 
           el1.url === el2.url;
  }

  calculateAccessibilityScore(results) {
    const total = results.elementStats?.summary?.totalElements || 1;
    const withAriaLabel = results.elementStats?.summary?.withAriaLabel || 0;
    const withRole = results.elementStats?.summary?.withRole || 0;
    
    return Math.round(((withAriaLabel + withRole) / (total * 2)) * 100);
  }

  calculateCoveragePercentage(results) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
    const critical = results.criticalCheck?.foundCritical?.length || 0;
    const totalCritical = (results.criticalCheck?.foundCritical?.length || 0) + 
                         (results.criticalCheck?.missingCritical?.length || 0);
    
    return totalCritical > 0 ? Math.round((critical / totalCritical) * 100) : 100;
  }

  generateRecommendations(results) {
    const recommendations = [];
    
    if (results.criticalCheck?.missingCritical?.length > 0) {
      recommendations.push(
        `üî¥ –ù–∞–π–¥–µ–Ω–æ ${results.criticalCheck.missingCritical.length} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`
      );
    }
    
    if (results.goldenComparison?.newElements?.length > 0) {
      recommendations.push(
        `üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${results.goldenComparison.newElements.length} –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–≥—Ä–µ—Å—Å–∏—é`
      );
    }
    
    if (results.goldenComparison?.removedElements?.length > 0) {
      recommendations.push(
        `‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–æ ${results.goldenComparison.removedElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Ç–µ—Ä—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏`
      );
    }
    
    const accessibilityScore = this.calculateAccessibilityScore(results);
    if (accessibilityScore < 70) {
      recommendations.push(
        `‚ôø –ù–∏–∑–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (${accessibilityScore}%) - –¥–æ–±–∞–≤—å—Ç–µ aria-label –∏ role –∞—Ç—Ä–∏–±—É—Ç—ã`
      );
    }
    
    return recommendations.length > 0 ? recommendations : ['‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'];
  }

  formatCriticalElementsCheck(check) {
    if (!check || !check.foundCritical) {
      return '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å';
    }
    
    const found = check.foundCritical.map(el => `‚úÖ ${el.name}`).join('\n');
    const missing = check.missingCritical.map(el => `‚ùå ${el.name}`).join('\n');
    
    return `${found}\n${missing}`;
  }

  formatGoldenComparison(comparison) {
    if (!comparison || comparison.identical === undefined) {
      return '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å';
    }
    
    if (comparison.identical) {
      return '‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏';
    }
    
    return comparison.differences.join('\n');
  }
} 