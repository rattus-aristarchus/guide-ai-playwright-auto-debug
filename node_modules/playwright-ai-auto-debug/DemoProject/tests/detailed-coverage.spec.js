// DemoProject/tests/detailed-coverage.spec.js

import { test, expect } from '@playwright/test';
import { DetailedCoverageTracker } from '../lib/detailedCoverageTracker.js';
import { MockMCPIntegration } from '../lib/mockMCPIntegration.js';

/**
 * üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–∫—Ä—ã—Ç—ã —Ç–µ—Å—Ç–∞–º–∏, –∞ –∫–∞–∫–∏–µ –Ω–µ—Ç
 */

let coverageTracker;
let mcpIntegration;

test.beforeAll(async () => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
  coverageTracker = new DetailedCoverageTracker({
    outputDir: 'detailed-coverage',
    trackingEnabled: true,
    includeSelectors: true,
    includeScreenshots: true
  });
  
  mcpIntegration = new MockMCPIntegration();
  
  // –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
  coverageTracker.startSession('detailed-demo-session');
  
  console.log('üé¨ –ù–∞—á–∞—Ç–∞ —Å–µ—Å—Å–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
});

test.afterAll(async () => {
  if (coverageTracker) {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    const reports = await coverageTracker.saveDetailedReports();
    
    console.log('\nüìä === –î–ï–¢–ê–õ–¨–ù–´–ï –û–¢–ß–ï–¢–´ –ü–û–ö–†–´–¢–ò–Ø ===');
    console.log(`JSON –æ—Ç—á–µ—Ç: ${reports.json}`);
    console.log(`HTML –æ—Ç—á–µ—Ç: ${reports.html}`);
    console.log(`–î–µ—Ä–µ–≤–æ –ø–æ–∫—Ä—ã—Ç–∏—è: ${reports.tree}`);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    const summary = coverageTracker.generateDetailedCoverageReport();
    console.log('\nüìà === –°–í–û–î–ö–ê –ü–û–ö–†–´–¢–ò–Ø ===');
    console.log(`–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${summary.summary.totalElements}`);
    console.log(`–ü–æ–∫—Ä—ã—Ç–æ: ${summary.summary.coveredElements}`);
    console.log(`–ù–µ –ø–æ–∫—Ä—ã—Ç–æ: ${summary.summary.uncoveredElements}`);
    console.log(`–ü–æ–∫—Ä—ã—Ç–∏–µ: ${summary.summary.coveragePercentage}%`);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const uncoveredCritical = summary.detailedElements.critical.filter(el => !el.covered);
    if (uncoveredCritical.length > 0) {
      console.log('\nüî¥ === –ù–ï–ü–û–ö–†–´–¢–´–ï –ö–†–ò–¢–ò–ß–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´ ===');
      uncoveredCritical.forEach(el => {
        console.log(`‚ùå ${el.type}: "${el.text}" (${el.selector})`);
      });
    }
  }
});

test.describe('–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤', () => {
  
  test('–ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ç—Ä–µ–∫–∏–Ω–≥–æ–º', async ({ page }) => {
    console.log('\nüîç === –ê–ù–ê–õ–ò–ó –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´ ===');
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto('https://playwright.dev');
    await page.waitForLoadState('networkidle');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ MCP snapshot
    const mcpSnapshot = await mcpIntegration.getMCPSnapshot(page);
    console.log('üì∏ MCP snapshot –ø–æ–ª—É—á–µ–Ω');
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const elements = coverageTracker.registerPageElements(
      'playwright-homepage', 
      mcpSnapshot, 
      'homepage-analysis'
    );
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ä–µ–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏
    console.log('\nüå≥ === –î–ï–†–ï–í–û –≠–õ–ï–ú–ï–ù–¢–û–í ===');
    const tree = coverageTracker.generateCoverageTree('playwright-homepage');
    printTreeToConsole(tree.tree, 0);
    
    // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫—Ä—ã—Ç–∏—è
    console.log('\nüéØ === –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø ===');
    
    // –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "Get started"
    try {
      const getStartedButton = page.locator('text="Get started"').first();
      if (await getStartedButton.isVisible()) {
        await getStartedButton.click();
        console.log('‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ "Get started"');
        
        // –û—Ç–º–µ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞–∫ –ø–æ–∫—Ä—ã—Ç–æ–≥–æ
        coverageTracker.markElementCovered(
          { type: 'button', text: 'Get started' },
          'homepage-analysis',
          'click'
        );
      }
    } catch (error) {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "Get started" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    await page.goto('https://playwright.dev');
    await page.waitForLoadState('networkidle');
    
    // –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ "Docs"
    try {
      const docsLink = page.locator('text="Docs"').first();
      if (await docsLink.isVisible()) {
        await docsLink.hover();
        console.log('‚úÖ –ù–∞–≤–µ–ª–∏ –Ω–∞ —Å—Å—ã–ª–∫—É "Docs"');
        
        coverageTracker.markElementCovered(
          { type: 'link', text: 'Docs' },
          'homepage-analysis',
          'hover'
        );
      }
    } catch (error) {
      console.log('‚ùå –°—Å—ã–ª–∫–∞ "Docs" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
    try {
      const searchInput = page.locator('input[placeholder*="Search"], [role="searchbox"]').first();
      if (await searchInput.isVisible()) {
        await searchInput.fill('testing');
        console.log('‚úÖ –í–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞');
        
        coverageTracker.markElementCovered(
          { type: 'input', text: 'Search' },
          'homepage-analysis',
          'fill'
        );
      }
    } catch (error) {
      console.log('‚ùå –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    expect(elements.length).toBeGreaterThan(0);
  });
  
  test('–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', async ({ page }) => {
    console.log('\nüìö === –ê–ù–ê–õ–ò–ó –°–¢–†–ê–ù–ò–¶–´ –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò ===');
    
    await page.goto('https://playwright.dev/docs/intro');
    await page.waitForLoadState('networkidle');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ snapshot –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const mcpSnapshot = await mcpIntegration.getMCPSnapshot(page);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const elements = coverageTracker.registerPageElements(
      'playwright-docs', 
      mcpSnapshot, 
      'docs-analysis'
    );
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏`);
    
    // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    try {
      const nextButton = page.locator('text="Next"').first();
      if (await nextButton.isVisible()) {
        await nextButton.click();
        console.log('‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ "Next"');
        
        coverageTracker.markElementCovered(
          { type: 'button', text: 'Next' },
          'docs-analysis',
          'click'
        );
      }
    } catch (error) {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "Next" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    expect(elements.length).toBeGreaterThan(0);
  });
  
  test('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è', async ({ page }) => {
    console.log('\nüìä === –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–¢–û–ì–û–í–û–ì–û –û–¢–ß–ï–¢–ê ===');
    
    // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ - –µ—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ
    if (coverageTracker.coverageData.allElements.size === 0) {
      // –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const mockSnapshot = `- button: "Test button"
- link: "Test link"
- input: "Test input"`;
      
      coverageTracker.registerPageElements('test-page', mockSnapshot, 'test-case');
      coverageTracker.markElementCovered(
        { type: 'button', text: 'Test button' },
        'test-case',
        'click'
      );
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    const report = coverageTracker.generateDetailedCoverageReport();
    
    console.log('\nüìà === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
    console.log(`–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${report.summary.totalElements}`);
    console.log(`–ü–æ–∫—Ä—ã—Ç–æ —Ç–µ—Å—Ç–∞–º–∏: ${report.summary.coveredElements}`);
    console.log(`–ù–µ –ø–æ–∫—Ä—ã—Ç–æ: ${report.summary.uncoveredElements}`);
    console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: ${report.summary.coveragePercentage}%`);
    console.log(`–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: ${report.summary.interactionsCount}`);
    
    // –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —Ç–∏–ø–∞–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    console.log('\nüìä === –ü–û–ö–†–´–¢–ò–ï –ü–û –¢–ò–ü–ê–ú ===');
    Object.entries(report.coverageByType).forEach(([type, coverage]) => {
      const icon = coverage.percentage === 100 ? '‚úÖ' : coverage.percentage > 50 ? '‚ö†Ô∏è' : '‚ùå';
      console.log(`${icon} ${type}: ${coverage.covered}/${coverage.total} (${coverage.percentage}%)`);
    });
    
    // –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    console.log('\nüåê === –ü–û–ö–†–´–¢–ò–ï –ü–û –°–¢–†–ê–ù–ò–¶–ê–ú ===');
    Object.entries(report.coverageByPage).forEach(([page, coverage]) => {
      const icon = coverage.percentage === 100 ? '‚úÖ' : coverage.percentage > 50 ? '‚ö†Ô∏è' : '‚ùå';
      console.log(`${icon} ${page}: ${coverage.covered}/${coverage.total} (${coverage.percentage}%)`);
    });
    
    // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    console.log('\nüî¥ === –ö–†–ò–¢–ò–ß–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´ ===');
    console.log(`–í—Å–µ–≥–æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö: ${report.criticalCoverage.total}`);
    console.log(`–ü–æ–∫—Ä—ã—Ç–æ: ${report.criticalCoverage.covered}`);
    console.log(`–ù–µ –ø–æ–∫—Ä—ã—Ç–æ: ${report.criticalCoverage.uncovered}`);
    console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç: ${report.criticalCoverage.percentage}%`);
    
    // –°–ø–∏—Å–æ–∫ –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    console.log('\n‚ùå === –ù–ï–ü–û–ö–†–´–¢–´–ï –≠–õ–ï–ú–ï–ù–¢–´ ===');
    report.detailedElements.uncovered.slice(0, 10).forEach(element => {
      const criticalMark = element.critical ? 'üî¥' : '';
      const interactiveMark = element.interactable ? 'üéØ' : '';
      console.log(`${criticalMark}${interactiveMark} ${element.type}: "${element.text}" (${element.selector})`);
    });
    
    if (report.detailedElements.uncovered.length > 10) {
      console.log(`... –∏ –µ—â–µ ${report.detailedElements.uncovered.length - 10} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===');
    report.recommendations.forEach(rec => {
      const priorityIcon = rec.priority === 'HIGH' ? 'üî¥' : rec.priority === 'MEDIUM' ? 'üü°' : 'üü¢';
      console.log(`${priorityIcon} [${rec.priority}] ${rec.category}: ${rec.message}`);
      console.log(`   –î–µ–π—Å—Ç–≤–∏–µ: ${rec.action}`);
      if (rec.elements.length > 0) {
        console.log(`   –≠–ª–µ–º–µ–Ω—Ç—ã: ${rec.elements.join(', ')}`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    expect(report.summary.totalElements).toBeGreaterThan(0);
    expect(report.summary.coveragePercentage).toBeGreaterThanOrEqual(0);
    expect(report.summary.coveragePercentage).toBeLessThanOrEqual(100);
  });
});

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ—Ä–µ–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
 */
function printTreeToConsole(nodes, level = 0) {
  nodes.forEach(node => {
    const indent = '  '.repeat(level);
    const coverageIcon = node.covered ? '‚úÖ' : '‚ùå';
    const criticalIcon = node.critical ? 'üî¥' : '';
    const interactableIcon = node.interactable ? 'üéØ' : '';
    const testsInfo = node.coverage.tests.length > 0 ? ` (${node.coverage.tests.length} —Ç–µ—Å—Ç–æ–≤)` : '';
    
    console.log(`${indent}${coverageIcon}${criticalIcon}${interactableIcon} ${node.type}: "${node.text}"${testsInfo}`);
    
    if (node.children && node.children.length > 0) {
      printTreeToConsole(node.children, level + 1);
    }
  });
} 