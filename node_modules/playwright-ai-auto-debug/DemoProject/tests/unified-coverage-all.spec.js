// DemoProject/tests/unified-coverage-all.spec.js

import { test, expect } from '@playwright/test';
import { GlobalCoverageManager } from '../lib/globalCoverageManager.js';
import { MockMCPIntegration } from '../lib/mockMCPIntegration.js';

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
const unifiedCoverageManager = new GlobalCoverageManager({
  outputDir: 'unified-coverage-all',
  sessionName: `all-tests-session-${Date.now()}`
});

// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º worker'–µ
test.describe.serial('üéØ –ï–î–ò–ù–´–ô –û–¢–ß–ï–¢: –í—Å–µ —Ç–µ—Å—Ç—ã –≤ –æ–¥–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ', () => {
  
  test.beforeAll(async () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ–¥–∏–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–∫—Ä—ã—Ç–∏—è
    unifiedCoverageManager.initializeGlobalSession();
    console.log('üåê –ó–∞–ø—É—â–µ–Ω–∞ –µ–¥–∏–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è –¥–ª—è –í–°–ï–• —Ç–µ—Å—Ç–æ–≤');
  });

  test.afterAll(async () => {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–¥–∏–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ï–î–ò–ù–û–ì–û –æ—Ç—á–µ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è...');
    await unifiedCoverageManager.saveUnifiedReport();
    unifiedCoverageManager.cleanup();
    console.log('‚úÖ –ï–î–ò–ù–´–ô –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ unified-coverage-all/');
  });

  test('‚úÖ –£–°–ü–ï–®–ù–´–ô: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Playwright', async ({ page }) => {
    const testName = '–£–°–ü–ï–®–ù–´–ô: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Playwright';
    
    try {
      await page.goto('https://playwright.dev');
      await page.waitForLoadState('networkidle');
      
      const mcpClient = new MockMCPIntegration();
      const snapshot = await mcpClient.getMCPSnapshot(page, { pageName: 'playwright-homepage' });
      
      const elements = unifiedCoverageManager.registerTestPageElements(
        testName, 
        'playwright-homepage', 
        snapshot
      );
      
      console.log(`üìã [${testName}] –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      
      // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
      try {
        const getStartedBtn = await page.locator('text="Get started"').first();
        if (await getStartedBtn.isVisible()) {
          await getStartedBtn.click();
          unifiedCoverageManager.markTestElementCovered(testName, {
            type: 'button',
            text: 'Get started',
            selector: 'text="Get started"'
          }, 'click');
          
          await page.waitForLoadState('networkidle');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ "Get started"');
      }
      
      unifiedCoverageManager.completeTest(testName, 'passed');
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${testName}:`, error.message);
      unifiedCoverageManager.completeTest(testName, 'failed');
      throw error;
    }
  });

  test('‚úÖ –£–°–ü–ï–®–ù–´–ô: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', async ({ page }) => {
    const testName = '–£–°–ü–ï–®–ù–´–ô: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏';
    
    try {
      await page.goto('https://playwright.dev/docs/intro');
      await page.waitForLoadState('networkidle');
      
      const mcpClient = new MockMCPIntegration();
      const snapshot = await mcpClient.getMCPSnapshot(page, { pageName: 'playwright-docs' });
      
      const elements = unifiedCoverageManager.registerTestPageElements(
        testName, 
        'playwright-docs', 
        snapshot
      );
      
      console.log(`üìã [${testName}] –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      
      try {
        const installationLink = await page.locator('text="Installation"').first();
        if (await installationLink.isVisible()) {
          await installationLink.click();
          unifiedCoverageManager.markTestElementCovered(testName, {
            type: 'link',
            text: 'Installation',
            selector: 'text="Installation"'
          }, 'click');
          
          await page.waitForTimeout(1000);
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ Installation');
      }
      
      unifiedCoverageManager.completeTest(testName, 'passed');
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${testName}:`, error.message);
      unifiedCoverageManager.completeTest(testName, 'failed');
      throw error;
    }
  });

  test('‚ùå –£–ü–ê–í–®–ò–ô: API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (–Ω–∞–º–µ—Ä–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞)', async ({ page }) => {
    const testName = '–£–ü–ê–í–®–ò–ô: API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è';
    
    try {
      await page.goto('https://playwright.dev/docs/api/class-page');
      await page.waitForLoadState('networkidle');
      
      const mcpClient = new MockMCPIntegration();
      const snapshot = await mcpClient.getMCPSnapshot(page, { pageName: 'playwright-api' });
      
      const elements = unifiedCoverageManager.registerTestPageElements(
        testName, 
        'playwright-api', 
        snapshot
      );
      
      console.log(`üìã [${testName}] –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–¥ –æ—à–∏–±–∫–æ–π
      try {
        const heading = await page.locator('h1').first();
        if (await heading.isVisible()) {
          await heading.hover();
          unifiedCoverageManager.markTestElementCovered(testName, {
            type: 'heading',
            text: 'API Documentation',
            selector: 'h1'
          }, 'hover');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º');
      }
      
      // –ù–∞–º–µ—Ä–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —É–ø–∞–≤—à–µ–≥–æ —Ç–µ—Å—Ç–∞
      unifiedCoverageManager.completeTest(testName, 'failed');
      console.log('‚ùå –¢–µ—Å—Ç –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ —É–ø–∞–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${testName}:`, error.message);
      unifiedCoverageManager.completeTest(testName, 'failed');
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤
    }
  });

  test('‚úÖ –£–°–ü–ï–®–ù–´–ô: –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ —Å –≤—ã—Å–æ–∫–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º', async ({ page }) => {
    const testName = '–£–°–ü–ï–®–ù–´–ô: –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ —Å –≤—ã—Å–æ–∫–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º';
    
    try {
      await page.goto('https://playwright.dev/docs/writing-tests');
      await page.waitForLoadState('networkidle');
      
      const mcpClient = new MockMCPIntegration();
      const snapshot = await mcpClient.getMCPSnapshot(page, { pageName: 'playwright-examples' });
      
      const elements = unifiedCoverageManager.registerTestPageElements(
        testName, 
        'playwright-examples', 
        snapshot
      );
      
      console.log(`üìã [${testName}] –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      
      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã—Å–æ–∫–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
      const interactions = [
        { selector: 'h1', type: 'heading', action: 'hover' },
        { selector: 'code', type: 'code', action: 'click' },
        { selector: '[role="tab"]', type: 'tab', action: 'click' },
        { selector: 'button', type: 'button', action: 'click' },
        { selector: 'a[href*="github"]', type: 'link', action: 'hover' }
      ];
      
      for (const interaction of interactions) {
        try {
          const element = await page.locator(interaction.selector).first();
          if (await element.isVisible()) {
            if (interaction.action === 'click') {
              await element.click();
            } else if (interaction.action === 'hover') {
              await element.hover();
            }
            
            unifiedCoverageManager.markTestElementCovered(testName, {
              type: interaction.type,
              text: interaction.selector,
              selector: interaction.selector
            }, interaction.action);
            
            await page.waitForTimeout(500);
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å ${interaction.action} –¥–ª—è ${interaction.selector}`);
        }
      }
      
      unifiedCoverageManager.completeTest(testName, 'passed');
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${testName}:`, error.message);
      unifiedCoverageManager.completeTest(testName, 'failed');
      throw error;
    }
  });

  test('‚úÖ –£–°–ü–ï–®–ù–´–ô: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –Ω–∏–∑–∫–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º', async ({ page }) => {
    const testName = '–£–°–ü–ï–®–ù–´–ô: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –Ω–∏–∑–∫–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º';
    
    try {
      await page.goto('https://playwright.dev/docs/test-configuration');
      await page.waitForLoadState('networkidle');
      
      const mcpClient = new MockMCPIntegration();
      const snapshot = await mcpClient.getMCPSnapshot(page, { pageName: 'playwright-config' });
      
      const elements = unifiedCoverageManager.registerTestPageElements(
        testName, 
        'playwright-config', 
        snapshot
      );
      
      console.log(`üìã [${testName}] –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∏–∑–∫–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
      try {
        const heading = await page.locator('h1').first();
        if (await heading.isVisible()) {
          await heading.hover();
          unifiedCoverageManager.markTestElementCovered(testName, {
            type: 'heading',
            text: 'Configuration',
            selector: 'h1'
          }, 'hover');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º');
      }
      
      unifiedCoverageManager.completeTest(testName, 'passed');
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${testName}:`, error.message);
      unifiedCoverageManager.completeTest(testName, 'failed');
      throw error;
    }
  });

  test('‚ùå –£–ü–ê–í–®–ò–ô: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL (–Ω–∞–º–µ—Ä–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞)', async ({ page }) => {
    const testName = '–£–ü–ê–í–®–ò–ô: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL';
    
    try {
      // –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏
      await page.goto('https://playwright.dev/nonexistent-page-404');
      await page.waitForLoadState('networkidle');
      
      const mcpClient = new MockMCPIntegration();
      const snapshot = await mcpClient.getMCPSnapshot(page, { pageName: 'playwright-404' });
      
      const elements = unifiedCoverageManager.registerTestPageElements(
        testName, 
        'playwright-404', 
        snapshot
      );
      
      console.log(`üìã [${testName}] –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      
      // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç
      const nonExistentElement = await page.locator('text="This element does not exist"');
      await expect(nonExistentElement).toBeVisible({ timeout: 1000 });
      
      unifiedCoverageManager.completeTest(testName, 'passed');
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${testName}:`, error.message);
      unifiedCoverageManager.completeTest(testName, 'failed');
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤
    }
  });

}); 