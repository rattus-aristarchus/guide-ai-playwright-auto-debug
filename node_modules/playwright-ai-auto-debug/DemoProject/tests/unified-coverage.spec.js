import { test, expect } from '@playwright/test';
import { globalCoverageManager } from '../lib/globalCoverageManager.js';
import { MockMCPIntegration } from '../lib/mockMCPIntegration.js';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
test.beforeAll(async () => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–∫—Ä—ã—Ç–∏—è
  globalCoverageManager.initializeGlobalSession();
  console.log('üåê –ó–∞–ø—É—â–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤');
});

test.afterAll(async () => {
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–¥–∏–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  console.log('üìä –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–¥–∏–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è...');
  await globalCoverageManager.saveUnifiedReport();
  globalCoverageManager.cleanup();
});

test.describe('–ï–¥–∏–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤', () => {
  
  test('–¢–µ—Å—Ç 1: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Playwright', async ({ page }) => {
    const testName = '–¢–µ—Å—Ç 1: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Playwright';
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto('https://playwright.dev');
    await page.waitForLoadState('networkidle');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —á–µ—Ä–µ–∑ MCP
    const mcpClient = new MockMCPIntegration();
    const snapshot = await mcpClient.getMCPSnapshot(page, { pageName: 'playwright-homepage' });
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const elements = globalCoverageManager.registerTestPageElements(
      testName, 
      'playwright-homepage', 
      snapshot
    );
    
    console.log(`üìã [${testName}] –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    
    // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    try {
      // –ö–ª–∏–∫ –ø–æ –ª–æ–≥–æ—Ç–∏–ø—É
      const logo = await page.locator('[aria-label="Playwright logo"]').first();
      if (await logo.isVisible()) {
        await logo.click();
        globalCoverageManager.markTestElementCovered(testName, {
          type: 'link',
          text: 'Playwright logo',
          selector: '[aria-label="Playwright logo"]'
        }, 'click');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –ª–æ–≥–æ—Ç–∏–ø—É');
    }
    
    try {
      // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "Get started"
      const getStartedBtn = await page.locator('text="Get started"').first();
      if (await getStartedBtn.isVisible()) {
        await getStartedBtn.click();
        globalCoverageManager.markTestElementCovered(testName, {
          type: 'button',
          text: 'Get started',
          selector: 'text="Get started"'
        }, 'click');
        
        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        await page.waitForLoadState('networkidle');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ "Get started"');
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    globalCoverageManager.completeTest(testName, 'passed');
  });

  test('–¢–µ—Å—Ç 2: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', async ({ page }) => {
    const testName = '–¢–µ—Å—Ç 2: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏';
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    await page.goto('https://playwright.dev/docs/intro');
    await page.waitForLoadState('networkidle');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —á–µ—Ä–µ–∑ MCP
    const mcpClient = new MockMCPIntegration();
    const snapshot = await mcpClient.getMCPSnapshot(page, { pageName: 'playwright-docs' });
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const elements = globalCoverageManager.registerTestPageElements(
      testName, 
      'playwright-docs', 
      snapshot
    );
    
    console.log(`üìã [${testName}] –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    
    // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    try {
      // –ö–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      const installationLink = await page.locator('text="Installation"').first();
      if (await installationLink.isVisible()) {
        await installationLink.click();
        globalCoverageManager.markTestElementCovered(testName, {
          type: 'link',
          text: 'Installation',
          selector: 'text="Installation"'
        }, 'click');
        
        await page.waitForTimeout(1000);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ Installation');
    }
    
    try {
      // –ü–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      const searchInput = await page.locator('[placeholder*="Search"]').first();
      if (await searchInput.isVisible()) {
        await searchInput.fill('test');
        globalCoverageManager.markTestElementCovered(testName, {
          type: 'input',
          text: 'Search',
          selector: '[placeholder*="Search"]'
        }, 'fill');
        
        await page.waitForTimeout(1000);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞');
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    globalCoverageManager.completeTest(testName, 'passed');
  });

  test('–¢–µ—Å—Ç 3: API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', async ({ page }) => {
    const testName = '–¢–µ—Å—Ç 3: API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è';
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É API
    await page.goto('https://playwright.dev/docs/api/class-page');
    await page.waitForLoadState('networkidle');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —á–µ—Ä–µ–∑ MCP
    const mcpClient = new MockMCPIntegration();
    const snapshot = await mcpClient.getMCPSnapshot(page, { pageName: 'playwright-api' });
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const elements = globalCoverageManager.registerTestPageElements(
      testName, 
      'playwright-api', 
      snapshot
    );
    
    console.log(`üìã [${testName}] –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    
    // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    try {
      // –†–∞—Å–∫—Ä—ã—Ç–∏–µ —Å–µ–∫—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–≤
      const methodToggle = await page.locator('[data-toggle="collapse"]').first();
      if (await methodToggle.isVisible()) {
        await methodToggle.click();
        globalCoverageManager.markTestElementCovered(testName, {
          type: 'button',
          text: 'Method toggle',
          selector: '[data-toggle="collapse"]'
        }, 'click');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–µ–∫—Ü–∏—é –º–µ—Ç–æ–¥–æ–≤');
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ —Å –Ω–µ—É–¥–∞—á–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    globalCoverageManager.completeTest(testName, 'failed');
  });

  test('–¢–µ—Å—Ç 4: –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞', async ({ page }) => {
    const testName = '–¢–µ—Å—Ç 4: –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞';
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    await page.goto('https://playwright.dev/docs/writing-tests');
    await page.waitForLoadState('networkidle');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —á–µ—Ä–µ–∑ MCP
    const mcpClient = new MockMCPIntegration();
    const snapshot = await mcpClient.getMCPSnapshot(page, { pageName: 'playwright-examples' });
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const elements = globalCoverageManager.registerTestPageElements(
      testName, 
      'playwright-examples', 
      snapshot
    );
    
    console.log(`üìã [${testName}] –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    
    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã—Å–æ–∫–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
    const interactions = [
      { selector: 'h1', type: 'heading', action: 'hover' },
      { selector: 'code', type: 'code', action: 'click' },
      { selector: '[role="tab"]', type: 'tab', action: 'click' },
      { selector: 'button', type: 'button', action: 'click' },
      { selector: 'a[href*="github"]', type: 'link', action: 'hover' }
    ];
    
    for (const interaction of interactions) {
      try {
        const element = await page.locator(interaction.selector).first();
        if (await element.isVisible()) {
          if (interaction.action === 'click') {
            await element.click();
          } else if (interaction.action === 'hover') {
            await element.hover();
          }
          
          globalCoverageManager.markTestElementCovered(testName, {
            type: interaction.type,
            text: interaction.selector,
            selector: interaction.selector
          }, interaction.action);
          
          await page.waitForTimeout(500);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å ${interaction.action} –¥–ª—è ${interaction.selector}`);
      }
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    globalCoverageManager.completeTest(testName, 'passed');
  });

  test('–¢–µ—Å—Ç 5: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', async ({ page }) => {
    const testName = '–¢–µ—Å—Ç 5: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è';
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    await page.goto('https://playwright.dev/docs/test-configuration');
    await page.waitForLoadState('networkidle');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —á–µ—Ä–µ–∑ MCP
    const mcpClient = new MockMCPIntegration();
    const snapshot = await mcpClient.getMCPSnapshot(page, { pageName: 'playwright-config' });
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const elements = globalCoverageManager.registerTestPageElements(
      testName, 
      'playwright-config', 
      snapshot
    );
    
    console.log(`üìã [${testName}] –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∏–∑–∫–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
    try {
      const heading = await page.locator('h1').first();
      if (await heading.isVisible()) {
        await heading.hover();
        globalCoverageManager.markTestElementCovered(testName, {
          type: 'heading',
          text: 'Configuration',
          selector: 'h1'
        }, 'hover');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º');
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    globalCoverageManager.completeTest(testName, 'passed');
  });

}); 