// src/presentation/cli/CoverageCommand.js

import fs from 'fs';
import path from 'path';

/**
 * CLI –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI Test Coverage
 */
export class CoverageCommand {
  constructor() {
    this.templateDir = path.resolve(process.cwd());
  }

  /**
   * üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫—Ä—ã—Ç–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async init(options = {}) {
    console.log('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI Test Coverage...');
    
    try {
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è coverage —Ñ–∞–π–ª–æ–≤
      const coverageDir = path.join(this.templateDir, 'coverage-lib');
      if (!fs.existsSync(coverageDir)) {
        fs.mkdirSync(coverageDir, { recursive: true });
      }

      // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫—Ä—ã—Ç–∏—è
      await this.copyCoverageFiles(coverageDir);
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞
      await this.createExampleTest();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º package.json
      await this.updatePackageJson();

      console.log('‚úÖ UI Test Coverage –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      console.log('\nüìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:');
      console.log('1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ: import { test, expect } from "./coverage-lib/fixture.js"');
      console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: npm test');
      console.log('3. –û—Ç–∫—Ä–æ–π—Ç–µ –æ—Ç—á–µ—Ç: open test-coverage-reports/index.html');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è:', error.message);
      throw error;
    }
  }

  /**
   * üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫—Ä—ã—Ç–∏—è
   */
  async copyCoverageFiles(targetDir) {
    const sourceDir = path.resolve(path.dirname(import.meta.url.replace('file://', '')), '../../infrastructure/coverage');
    
    // –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    const filesToCopy = [
      'testElementTracker.js',
      'globalCoverageTracker.js',
      'testCoverageFixture.js'
    ];

    for (const fileName of filesToCopy) {
      const sourcePath = path.join(sourceDir, fileName);
      const targetPath = path.join(targetDir, fileName);
      
      if (fs.existsSync(sourcePath)) {
        fs.copyFileSync(sourcePath, targetPath);
        console.log(`üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${fileName}`);
      }
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π fixture.js –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const fixtureContent = `// coverage-lib/fixture.js - –ü—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç –¥–ª—è UI Test Coverage

export { test, expect } from './testCoverageFixture.js';
export { TestElementTracker } from './testElementTracker.js'; 
export { GlobalCoverageTracker } from './globalCoverageTracker.js';
`;
    
    fs.writeFileSync(path.join(targetDir, 'fixture.js'), fixtureContent);
    console.log('üìÑ –°–æ–∑–¥–∞–Ω: fixture.js');
  }

  /**
   * üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Ç–µ—Å—Ç–∞
   */
  async createExampleTest() {
    const exampleTest = `// example-coverage.spec.js - –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è UI Test Coverage

import { test, expect } from './coverage-lib/fixture.js';

test.describe('üéØ UI Coverage Example', () => {
  test('‚úÖ –¢–µ—Å—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø–æ–∫—Ä—ã—Ç–∏—è', async ({ page }) => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    await page.goto('https://playwright.dev/');
    
    // –ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    await page.locator('text=Docs').click();
    await page.goBack();
    
    await page.locator('[aria-label="Search (Command+K)"]').click();
    await page.keyboard.press('Escape');
    
    console.log('‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç—Å–ª–µ–∂–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
  });
  
  // –ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç:
  // test-coverage-reports/index.html
});
`;

    const examplePath = path.join(this.templateDir, 'example-coverage.spec.js');
    if (!fs.existsSync(examplePath)) {
      fs.writeFileSync(examplePath, exampleTest);
      console.log('üìÑ –°–æ–∑–¥–∞–Ω: example-coverage.spec.js');
    }
  }

  /**
   * üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ package.json
   */
  async updatePackageJson() {
    const packagePath = path.join(this.templateDir, 'package.json');
    
    if (fs.existsSync(packagePath)) {
      const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      if (!packageJson.scripts) {
        packageJson.scripts = {};
      }
      
      if (!packageJson.scripts['test:coverage']) {
        packageJson.scripts['test:coverage'] = 'npx playwright test && echo "üìä –û—Ç—á–µ—Ç: test-coverage-reports/index.html"';
      }
      
      if (!packageJson.scripts['coverage:open']) {
        packageJson.scripts['coverage:open'] = 'open test-coverage-reports/index.html';
      }

      // –î–æ–±–∞–≤–ª—è–µ–º type: module –µ—Å–ª–∏ –Ω–µ—Ç
      if (!packageJson.type) {
        packageJson.type = 'module';
      }
      
      fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2));
      console.log('üì¶ –û–±–Ω–æ–≤–ª–µ–Ω: package.json');
    }
  }

  /**
   * ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫—Ä—ã—Ç–∏—è
   */
  async info() {
    console.log('üéØ UI Test Coverage System');
    console.log('üìä –†–µ–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∞–º–∏');
    console.log('\n‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:');
    console.log('- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏');
    console.log('- –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å drill-down –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π');
    console.log('- –ê–Ω–∞–ª–∏–∑ –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏');
    console.log('- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ HTML –æ—Ç—á–µ—Ç—ã');
    console.log('\nüöÄ –ö–æ–º–∞–Ω–¥—ã:');
    console.log('- npx playwright-ai coverage init  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ');
    console.log('- npm run test:coverage            # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º');
    console.log('- npm run coverage:open            # –û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç—á–µ—Ç–∞');
  }
}
