// new-pw-ai/src/main/lib/testCoverageFixture.js

import { test as base } from '@playwright/test';
import { TestElementTracker } from './testElementTracker.js';
import { GlobalCoverageTracker } from './globalCoverageTracker.js';

/**
 * Playwright fixture –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä—ã
const elementTracker = new TestElementTracker({
  outputDir: 'test-coverage-reports',
  trackingEnabled: true
});

const globalTracker = new GlobalCoverageTracker({
  outputDir: 'test-coverage-reports',
  trackingEnabled: true
});

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π test fixture —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø–æ–∫—Ä—ã—Ç–∏—è
 */
export const test = base.extend({
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
  page: async ({ page }, use, testInfo) => {
    const testName = testInfo.title;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    await elementTracker.startTestTracking(testName, page);
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã page –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
    const originalMethods = {};
    
    // –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    const methodsToTrack = [
      'click', 'fill', 'type', 'check', 'uncheck', 'selectOption',
      'hover', 'focus', 'blur', 'dblclick', 'press',
      'waitForSelector', 'isVisible', 'isEnabled', 'isChecked'
    ];
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã page
    methodsToTrack.forEach(methodName => {
      if (typeof page[methodName] === 'function') {
        originalMethods[methodName] = page[methodName];
        page[methodName] = function(selector, ...args) {
          // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –≤ –æ–±–æ–∏—Ö —Ç—Ä–µ–∫–µ—Ä–∞—Ö
          elementTracker.trackSelectorUsage(testName, selector, methodName, args[0]);
          globalTracker.addSelectorUsage(testName, selector, methodName, args[0]);
          return originalMethods[methodName].call(this, selector, ...args);
        };
      }
    });

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º page.goto –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    const originalGoto = page.goto;
    page.goto = async function(url, options) {
      const result = await originalGoto.call(this, url, options);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      try {
        const currentUrl = page.url();
        if (currentUrl && 
            !currentUrl.includes('about:blank') && 
            currentUrl.includes('playwright.dev')) {
          console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ goto: ${currentUrl} –¥–ª—è —Ç–µ—Å—Ç–∞: ${testName}`);
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ –æ–±–æ–∏—Ö —Ç—Ä–µ–∫–µ—Ä–∞—Ö
          await elementTracker.trackPageVisit(testName, currentUrl, page);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä
          const pageElements = await elementTracker.extractPageElements(page, currentUrl);
          globalTracker.addPageData(currentUrl, { elements: pageElements }, testName);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ goto:`, error.message);
      }
      
      return result;
    };
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º page.locator
    const originalLocator = page.locator;
    page.locator = function(selector, options) {
      elementTracker.trackSelectorUsage(testName, selector, 'locator', options);
      globalTracker.addSelectorUsage(testName, selector, 'locator', options);
      return originalLocator.call(this, selector, options);
    };
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã getBy*
    const getByMethods = ['getByRole', 'getByText', 'getByLabel', 'getByTestId', 'getByPlaceholder'];
    getByMethods.forEach(methodName => {
      if (typeof page[methodName] === 'function') {
        originalMethods[methodName] = page[methodName];
        page[methodName] = function(selector, options) {
          const selectorString = typeof selector === 'string' ? selector : JSON.stringify(selector);
          elementTracker.trackSelectorUsage(testName, `${methodName}(${selectorString})`, methodName, options);
          globalTracker.addSelectorUsage(testName, `${methodName}(${selectorString})`, methodName, options);
          return originalMethods[methodName].call(this, selector, options);
        };
      }
    });
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page.on('load', async () => {
      try {
        const url = page.url();
        if (url && 
            !url.includes('about:blank') && 
            !url.includes('/assets/') && 
            !url.includes('/img/') && 
            !url.includes('.js') && 
            !url.includes('.css') && 
            !url.includes('.png') && 
            !url.includes('.jpg') && 
            !url.includes('.svg') &&
            url.includes('playwright.dev')) {
          console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url} –¥–ª—è —Ç–µ—Å—Ç–∞: ${testName}`);
          await globalTracker.trackPageVisit(testName, url, page);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:`, error.message);
      }
    });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é page
    await use(page);
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
    await elementTracker.finishTestTracking(testName);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä
    const testData = elementTracker.testCoverageData.tests.get(testName);
    if (testData) {
      globalTracker.addTestData(testName, {
        ...testData,
        status: testInfo.status
      });
    }
  }
});

/**
 * –•—É–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
test.afterAll(async () => {
  console.log('\nüìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...');
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
    const unifiedReport = globalTracker.generateUnifiedReport();
    const reportPaths = await globalTracker.saveUnifiedReport(unifiedReport);
    
    console.log('‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω');
    console.log(`üìà –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: ${unifiedReport.summary.coveragePercentage}%`);
    console.log(`üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${unifiedReport.summary.totalTests}`);
    console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: ${unifiedReport.summary.totalPages}`);
    console.log(`üéØ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${unifiedReport.summary.totalElements}`);
    console.log(`‚úÖ –ü–æ–∫—Ä—ã—Ç–æ: ${unifiedReport.summary.coveredElements}`);
    console.log(`‚ùå –ù–µ–ø–æ–∫—Ä—ã—Ç–æ: ${unifiedReport.summary.uncoveredElements}`);
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (unifiedReport.recommendations.length > 0) {
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      unifiedReport.recommendations.forEach(rec => {
        console.log(`   ${rec.message}`);
      });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (unifiedReport.uncoveredElements.length > 0) {
      console.log('\nüéØ –¢–æ–ø-5 –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:');
      unifiedReport.uncoveredElements.slice(0, 5).forEach((element, index) => {
        console.log(`   ${index + 1}. ${element.text || element.tagName} (${element.pageUrl})`);
        console.log(`      –°–µ–ª–µ–∫—Ç–æ—Ä—ã: ${element.suggestedSelectors.slice(0, 2).join(', ')}`);
      });
    }
    
    console.log(`\nüè† –ì–ª–∞–≤–Ω—ã–π –æ—Ç—á–µ—Ç: test-coverage-reports/index.html`);
    console.log(`üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: ${reportPaths.htmlPath}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error.message);
  }
});

export { expect } from '@playwright/test';
