// src/infrastructure/repositories/FileErrorRepository.js

import fs from 'fs';
import path from 'path';
import { glob } from 'glob';
import { TestError } from '../../domain/entities/TestError.js';

/**
 * –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –æ—à–∏–±–æ–∫ —Ç–µ—Å—Ç–æ–≤
 */
export class FileErrorRepository {
  constructor() {
    this.name = 'FileErrorRepository';
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ
   * @param {string} projectPath - –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
   * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   * @returns {Promise<TestError[]>} - –º–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫ —Ç–µ—Å—Ç–æ–≤
   */
  async findErrors(projectPath, config) {
    console.log('üîç Finding test error files...');
    
    const errorFiles = [];
    const patterns = config.error_file_patterns || [
      '**/error-context.md',
      'copy-prompt.txt',
      'error.txt',
      'test-error.md',
      '*-error.txt',
      '*-error.md'
    ];

    const resultsDir = config.results_dir || 'test-results';
    const searchPath = path.join(projectPath, resultsDir);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (!fs.existsSync(searchPath)) {
      console.log(`‚ö†Ô∏è  Results directory not found: ${searchPath}`);
      return [];
    }

    // –ò—â–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–∞–∂–¥–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É
    for (const pattern of patterns) {
      console.log(`üîç Searching with pattern: ${pattern}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º **/ –≤ –Ω–∞—á–∞–ª–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const searchPattern = pattern.startsWith('**/') ? pattern : `**/${pattern}`;
      const fullPattern = path.join(searchPath, searchPattern);
      
      const files = await glob(fullPattern, { 
        ignore: ['**/node_modules/**'],
        absolute: true 
      });

      console.log(`üìÅ Found ${files.length} files with pattern: ${path.basename(pattern)}`);

      for (const filePath of files) {
        try {
          const errorFile = await this.loadErrorFile(filePath, config);
          if (errorFile) {
            errorFiles.push(errorFile);
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è  Failed to load error file ${filePath}: ${error.message}`);
        }
      }
    }

    console.log(`üìÅ Found ${errorFiles.length} potential error files`);
    return errorFiles;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –æ—à–∏–±–∫–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç TestError entity
   * @param {string} filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
   * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   * @returns {Promise<TestError|null>} - –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ —Ç–µ—Å—Ç–∞
   */
  async loadErrorFile(filePath, config) {
    try {
      if (!fs.existsSync(filePath)) {
        return null;
      }

      const content = fs.readFileSync(filePath, 'utf-8');
      
      if (!content || content.trim().length === 0) {
        console.warn(`‚ö†Ô∏è  Empty error file: ${filePath}`);
        return null;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
      const metadata = this.extractMetadataFromPath(filePath);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      const errorType = this.detectErrorType(content);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
      const severity = this.calculateSeverity(content, errorType);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      const keywords = this.extractKeywords(content);

      // –°–æ–∑–¥–∞–µ–º TestError entity
      const testError = new TestError(
        filePath,
        content,
        errorType,
        metadata.testName
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
      testError.keywords = keywords;
      testError.htmlPath = this.findRelatedHtmlReport(filePath, config);

      return testError;

    } catch (error) {
      console.error(`‚ùå Error loading file ${filePath}:`, error.message);
      return null;
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
   * @param {string} filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
   * @returns {Object} - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
   */
  extractMetadataFromPath(filePath) {
    const dirname = path.dirname(filePath);
    const basename = path.basename(filePath);
    const parts = dirname.split(path.sep);

    return {
      testName: this.extractTestNameFromPath(parts),
      browser: this.extractBrowserFromPath(parts),
      timestamp: fs.statSync(filePath).mtime,
      fileSize: fs.statSync(filePath).size
    };
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏–∑ –ø—É—Ç–∏
   * @param {string[]} pathParts - —á–∞—Å—Ç–∏ –ø—É—Ç–∏
   * @returns {string} - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
   */
  extractTestNameFromPath(pathParts) {
    // –ò—â–µ–º —á–∞—Å—Ç–∏ –ø—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
    for (const part of pathParts) {
      if (part.includes('spec') || part.includes('test') || part.includes('Demo')) {
        return part.replace(/[_-]/g, ' ').trim();
      }
    }
    return 'Unknown Test';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –∏–∑ –ø—É—Ç–∏
   * @param {string[]} pathParts - —á–∞—Å—Ç–∏ –ø—É—Ç–∏
   * @returns {string} - –±—Ä–∞—É–∑–µ—Ä
   */
  extractBrowserFromPath(pathParts) {
    const browsers = ['chromium', 'firefox', 'webkit', 'chrome', 'safari'];
    for (const part of pathParts) {
      for (const browser of browsers) {
        if (part.toLowerCase().includes(browser)) {
          return browser;
        }
      }
    }
    return 'unknown';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
   * @param {string} content - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
   * @returns {string} - —Ç–∏–ø –æ—à–∏–±–∫–∏
   */
  detectErrorType(content) {
    const lowerContent = content.toLowerCase();

    if (lowerContent.includes('timeout') || lowerContent.includes('timed out')) {
      return 'TIMEOUT';
    }
    if (lowerContent.includes('selector') || lowerContent.includes('element not found')) {
      return 'SELECTOR';
    }
    if (lowerContent.includes('network') || lowerContent.includes('connection')) {
      return 'NETWORK';
    }
    if (lowerContent.includes('assertion') || lowerContent.includes('expect')) {
      return 'ASSERTION';
    }
    if (lowerContent.includes('navigation') || lowerContent.includes('page')) {
      return 'NAVIGATION';
    }
    
    return 'UNKNOWN';
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
   * @param {string} content - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
   * @param {string} errorType - —Ç–∏–ø –æ—à–∏–±–∫–∏
   * @returns {string} - —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
   */
  calculateSeverity(content, errorType) {
    const criticalKeywords = ['fatal', 'critical', 'crash', 'abort'];
    const highKeywords = ['timeout', 'failed', 'error', 'exception'];
    const mediumKeywords = ['warning', 'retry', 'fallback'];

    const lowerContent = content.toLowerCase();

    if (criticalKeywords.some(keyword => lowerContent.includes(keyword))) {
      return 'CRITICAL';
    }
    if (highKeywords.some(keyword => lowerContent.includes(keyword)) || 
        ['TIMEOUT', 'ASSERTION'].includes(errorType)) {
      return 'HIGH';
    }
    if (mediumKeywords.some(keyword => lowerContent.includes(keyword))) {
      return 'MEDIUM';
    }

    return 'LOW';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
   * @param {string} content - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
   * @returns {string[]} - –º–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
   */
  extractKeywords(content) {
    const keywords = new Set();
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    const techTerms = [
      'playwright', 'chromium', 'firefox', 'webkit',
      'selector', 'element', 'timeout', 'click', 'type',
      'navigation', 'page', 'frame', 'dialog'
    ];

    const lowerContent = content.toLowerCase();
    
    for (const term of techTerms) {
      if (lowerContent.includes(term)) {
        keywords.add(term);
      }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    const selectorMatches = content.match(/['"`][\w\-#\.\[\]="':]+['"`]/g);
    if (selectorMatches) {
      selectorMatches.slice(0, 5).forEach(match => {
        keywords.add(match.replace(/['"`]/g, ''));
      });
    }

    return Array.from(keywords).slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–π HTML –æ—Ç—á–µ—Ç
   * @param {string} errorFilePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—à–∏–±–∫–∏
   * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   * @returns {string|null} - –ø—É—Ç—å –∫ HTML –æ—Ç—á–µ—Ç—É
   */
  findRelatedHtmlReport(errorFilePath, config) {
    try {
      const reportDir = config.report_dir || 'playwright-report';
      const projectDir = path.dirname(path.dirname(errorFilePath));
      const htmlReportPath = path.join(projectDir, reportDir, 'index.html');

      if (fs.existsSync(htmlReportPath)) {
        return htmlReportPath;
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è  Could not find HTML report: ${error.message}`);
    }

    return null;
  }
}
