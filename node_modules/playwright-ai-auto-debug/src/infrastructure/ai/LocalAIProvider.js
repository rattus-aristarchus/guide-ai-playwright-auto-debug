// src/infrastructure/ai/LocalAIProvider.js

/**
 * –õ–æ–∫–∞–ª—å–Ω—ã–π AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LM Studio, Ollama –∏ –¥—Ä—É–≥–∏–º–∏ –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É –æ—Ç–≤–µ—Ç–æ–≤
 */
export class LocalAIProvider {
  constructor() {
    this.providerName = 'Local AI';
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ AI —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
   * @param {string} prompt - –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   * @param {string} domSnapshot - DOM snapshot (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {Promise<string>} - –æ—Ç–≤–µ—Ç –æ—Ç AI
   */
  async generateResponse(prompt, config, domSnapshot = null) {
    const requestBody = {
      model: config.model || 'auto',
      messages: [
        ...config.messages || [],
        {
          role: 'user',
          content: this.buildPromptContent(prompt, domSnapshot)
        }
      ],
      max_tokens: 2000,
      temperature: 0.1,
      stream: config.stream || false
    };

    try {
      const response = await fetch(config.ai_server, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...(config.api_key && config.api_key !== '' ? {
            'Authorization': `Bearer ${config.api_key}`
          } : {})
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorText = await response.text().catch(() => '');
        throw new Error(`Local AI server error: ${response.status} ${response.statusText} - ${errorText}`);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      if (config.stream) {
        return await this.handleStreamResponse(response);
      } else {
        return await this.handleRegularResponse(response);
      }

    } catch (error) {
      if (error.name === 'TypeError' && error.message.includes('fetch')) {
        throw new Error(`Network error: Unable to connect to local AI server at ${config.ai_server}. Make sure the server is running.`);
      }
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI —Å–µ—Ä–≤–µ—Ä–∞
   * @param {Response} response - –æ—Ç–≤–µ—Ç –æ—Ç fetch
   * @returns {Promise<string>} - –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
   */
  async handleStreamResponse(response) {
    const reader = response.body.getReader();
    const decoder = new TextDecoder();
    let fullResponse = '';

    console.log('üì° Receiving streaming response...');

    try {
      while (true) {
        const { done, value } = await reader.read();
        
        if (done) break;

        const chunk = decoder.decode(value, { stream: true });
        const lines = chunk.split('\n');

        for (const line of lines) {
          if (line.startsWith('data: ')) {
            const data = line.slice(6).trim();
            
            if (data === '[DONE]') {
              console.log('\n‚úÖ Stream completed');
              return fullResponse.trim();
            }

            try {
              const parsed = JSON.parse(data);
              const content = parsed.choices?.[0]?.delta?.content || '';
              
              if (content) {
                fullResponse += content;
                // –í—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                process.stdout.write(content);
              }
            } catch (parseError) {
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
              continue;
            }
          }
        }
      }
    } finally {
      reader.releaseLock();
    }

    if (fullResponse.trim().length === 0) {
      throw new Error('Empty response received from streaming API');
    }

    console.log(`\n‚úÖ Received ${fullResponse.length} characters`);
    return fullResponse.trim();
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–π (–Ω–µ –ø–æ—Ç–æ–∫–æ–≤—ã–π) –æ—Ç–≤–µ—Ç
   * @param {Response} response - –æ—Ç–≤–µ—Ç –æ—Ç fetch
   * @returns {Promise<string>} - –æ—Ç–≤–µ—Ç –æ—Ç AI
   */
  async handleRegularResponse(response) {
    const data = await response.json();
    
    if (!data.choices || data.choices.length === 0) {
      throw new Error('No response choices returned from local AI server');
    }

    const content = data.choices[0].message?.content;
    if (!content) {
      throw new Error('Empty content in response from local AI server');
    }

    return content.trim();
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞ —Å —É—á–µ—Ç–æ–º DOM snapshot
   * @param {string} prompt - –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç
   * @param {string} domSnapshot - DOM snapshot
   * @returns {string} - –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
   */
  buildPromptContent(prompt, domSnapshot) {
    let content = prompt;

    if (domSnapshot) {
      content += '\n\n## DOM Snapshot\n';
      content += '```html\n';
      content += domSnapshot;
      content += '\n```';
      content += '\n\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ DOM –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.';
    }

    return content;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   * @returns {string}
   */
  getProviderName() {
    return this.providerName;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π
   * @returns {string[]}
   */
  getSupportedModels() {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ª—é–±—ã–µ –º–æ–¥–µ–ª–∏
    return null;
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   * @returns {Promise<{isValid: boolean, issues: string[]}>}
   */
  async validateConfiguration(config) {
    const issues = [];

    if (!config.ai_server) {
      issues.push('AI server URL is required');
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
      try {
        const url = new URL(config.ai_server);
        if (!['localhost', '127.0.0.1'].includes(url.hostname) && 
            !url.hostname.startsWith('192.168.') && 
            !url.hostname.startsWith('10.') &&
            !url.hostname.startsWith('172.')) {
          console.warn(`‚ö†Ô∏è  Server ${url.hostname} doesn't appear to be local. Make sure it's accessible.`);
        }
      } catch (urlError) {
        issues.push('Invalid AI server URL format');
      }
    }

    if (!config.model) {
      issues.push('Model is required');
    }

    return {
      isValid: issues.length === 0,
      issues
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ AI —Å–µ—Ä–≤–µ—Ä–∞
   * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   * @returns {Promise<boolean>}
   */
  async checkApiAvailability(config) {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      const response = await fetch(config.ai_server, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...(config.api_key && config.api_key !== '' ? {
            'Authorization': `Bearer ${config.api_key}`
          } : {})
        },
        body: JSON.stringify({
          model: config.model || 'auto',
          messages: [{ role: 'user', content: 'test' }],
          max_tokens: 1,
          stream: false
        })
      });

      return response.ok;
    } catch {
      return false;
    }
  }
}
