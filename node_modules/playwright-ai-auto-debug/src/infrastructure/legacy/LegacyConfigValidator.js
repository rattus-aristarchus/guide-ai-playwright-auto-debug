// src/infrastructure/legacy/LegacyConfigValidator.js

import { ConfigLoader } from '../config/ConfigLoader.js';

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
export async function validateConfiguration() {
  try {
    console.log('üîß Loading configuration...');
    
    const configLoader = new ConfigLoader();
    const config = await configLoader.loadAiConfig();
    
    console.log('‚úÖ Configuration loaded successfully');
    console.log(`ü§ñ AI Provider: ${getProviderName(config.ai_server)}`);
    console.log(`üì° Server: ${config.ai_server}`);
    console.log(`üéØ Model: ${config.model}`);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const validation = configLoader.validateConfig(config);
    
    if (validation.isValid) {
      console.log('‚úÖ Configuration is valid');
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      await checkApiConnection(config);
      
      console.log('üéâ All checks passed!');
      return { success: true, config, issues: [] };
    } else {
      console.log('‚ùå Configuration validation failed:');
      validation.issues.forEach(issue => {
        console.log(`   ‚Ä¢ ${issue}`);
      });
      
      return { success: false, config, issues: validation.issues };
    }
    
  } catch (error) {
    console.error('‚ùå Configuration validation error:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ URL —Å–µ—Ä–≤–µ—Ä–∞
 * @param {string} serverUrl 
 * @returns {string}
 */
function getProviderName(serverUrl) {
  if (serverUrl.includes('api.openai.com')) return 'OpenAI';
  if (serverUrl.includes('api.mistral.ai')) return 'Mistral';
  if (serverUrl.includes('localhost') || serverUrl.includes('127.0.0.1')) return 'Local AI';
  return 'Custom';
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API
 * @param {Object} config 
 */
async function checkApiConnection(config) {
  console.log('üîç Testing API connection...');
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    let Provider;
    const providerName = getProviderName(config.ai_server);
    
    switch (providerName) {
      case 'OpenAI':
        const { OpenAIProvider } = await import('../ai/OpenAIProvider.js');
        Provider = OpenAIProvider;
        break;
      case 'Mistral':
        const { MistralProvider } = await import('../ai/MistralProvider.js');
        Provider = MistralProvider;
        break;
      case 'Local AI':
        const { LocalAIProvider } = await import('../ai/LocalAIProvider.js');
        Provider = LocalAIProvider;
        break;
      default:
        console.log('‚ö†Ô∏è  Unknown provider, skipping API test');
        return;
    }
    
    const provider = new Provider();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (typeof provider.checkApiAvailability === 'function') {
      const isAvailable = await provider.checkApiAvailability(config);
      if (isAvailable) {
        console.log('‚úÖ API connection successful');
      } else {
        console.log('‚ö†Ô∏è  API connection failed (check credentials)');
      }
    } else {
      console.log('‚ÑπÔ∏è  API availability check not implemented for this provider');
    }
    
  } catch (error) {
    console.log(`‚ö†Ô∏è  API connection test failed: ${error.message}`);
  }
}
